<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoGameEngine</name>
    </assembly>
    <members>
        <member name="T:MonoGameEngine.AudioManager">
            <summary>AudioManager exposes high-level functionality for controlling audio using Monogame's underlying XNA architecture.</summary>
        </member>
        <member name="P:MonoGameEngine.AudioManager.Instance">
            <summary>Provides access to this AudioManager object. The main way to use the built-in audio functionality.</summary>
        </member>
        <member name="P:MonoGameEngine.AudioManager.FallOff">
            <summary>An integer property which represents the rate at which the volume of sound effects begins to drop when distanced from the center of the Camera2D.</summary>
        </member>
        <member name="M:MonoGameEngine.AudioManager.Update(System.Single)">
            <summary>
            A method to keep the AudioManager up-to-date. <b>Called automatically by Core</b>.
            </summary>
            <param name="deltaTime">The current delta time of the frame.</param>
        </member>
        <member name="M:MonoGameEngine.AudioManager.LerpBGMVolume(System.Single)">
            <summary>
            Interpolates the volume of the current BGM. Creates a 'fade in' effect on the audio.
            </summary>
            <param name="deltaTime">The current delta time of the frame.</param>
        </member>
        <member name="M:MonoGameEngine.AudioManager.Refresh">
            <summary>
            Method used to check for finished SFX objects, and disposes of them. 
            Also starts a BGM loop after a BGM intro finishes. 
            Invoked from Update().
            </summary>
        </member>
        <member name="M:MonoGameEngine.AudioManager.PlaySFX(MonoGameEngine.SFX,MonoGameEngine.StandardCore.GameObject)">
            <summary>
            Play a pre-existing SFX instance.
            </summary>
            <param name="soundEffect">An instance of a pre-existing SFX object.</param>
            <param name="emitter">The GameObject that has emitted the sound effect.</param>
        </member>
        <member name="M:MonoGameEngine.AudioManager.PlaySFX(System.String,MonoGameEngine.StandardCore.GameObject,MonoGameEngine.SFXOverlapRule,System.Boolean)">
            <summary>
            Play a new SFX instance.
            </summary>
            <param name="filename">The name of the desired sound effect</param>
            <param name="emitter">The GameObject that has emitted the sound effect.</param>
            <param name="overlapRule">[Optional] Determines what happens if another SFX instance of the same name is already active. Defaults to SFXOverlapRule.None.</param>
            <param name="blockBGM">[Optional] Determines if the sound effect should pause the current BGM while it plays. 'false' by default.</param>
        </member>
        <member name="M:MonoGameEngine.AudioManager.PlayBGM(System.String,System.Boolean,System.Boolean)">
            <summary>
            Plays a piece of music of the given filename, if it isn't already playing. Has some customisable options which can be ignored if not needed.
            </summary>
            <param name="filename">The name of the piece of music that should be played.</param>
            <param name="loop">[Optional] Should this piece of music loop infinitely? 'true' by default.</param>
            <param name="fadeIn">[Optional] Should this piece of music start with a 'fade in' effect? 'true' by default.</param>
        </member>
        <member name="M:MonoGameEngine.AudioManager.PlayBGMWithIntro(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Plays a piece of music (with an intro) of the given filenames, if it isn't already playing. 
            Has some customisable options which can be ignored if not needed.
            </summary>
            <param name="introName">The name of the intro/one-off track that should be played.</param>
            <param name="bgmName">The name of the main piece of music that should be played.</param>
            <param name="loop">[Optional] Should this piece of music loop infinitely? 'true' by default.</param>
            <param name="fadeIn">[Optional] Should this piece of music start with a 'fade in' effect? 'true' by default.</param>
        </member>
        <member name="M:MonoGameEngine.AudioManager.StopBGM">
            <summary>
            Stop the current BGM or BGM intro, if either exist.
            </summary>
        </member>
        <member name="M:MonoGameEngine.AudioManager.IsPlayingBGM">
            <summary>
            Check to see if a BGM loop or intro is playing currently.
            </summary>
            <returns>'true' if BGM loop or intro is playing.</returns>
        </member>
        <member name="M:MonoGameEngine.AudioManager.IsBGMFinished">
            <summary>
            Check to see if the most recent BGM has stopped playing.
            </summary>
            <returns>'true' if the current BGM has stopped and no intro is playing.</returns>
        </member>
        <member name="M:MonoGameEngine.AudioManager.GetCurrentBGMName">
            <summary>
            Get the current BGM's name.
            </summary>
            <returns>A string value containing the current BGM's name.</returns>
        </member>
        <member name="M:MonoGameEngine.AudioManager.IsSFXPlaying(System.String)">
            <summary>
            Check to see if an SFX instance is currently playing with a given name.
            </summary>
            <param name="name">The name of the desired sound effect.</param>
            <returns>Returns 'true' if any SFX instance with the given name is currently playing. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.AudioManager.PauseAll">
            <summary>
            Pause all currently playing BGM and SFX.
            </summary>
        </member>
        <member name="M:MonoGameEngine.AudioManager.ResumeAll">
            <summary>
            Resume all currently paused BGM and SFX.
            </summary>
        </member>
        <member name="M:MonoGameEngine.AudioManager.SetBGMVolume(System.Single)">
            <summary>
            Allows the volume of any currently playing BGM to be set. 0.0f (silent) -> 1.0f (full volume) is the expected range.
            </summary>
            <param name="volume">The desired volume of the BGM.</param>
        </member>
        <member name="M:MonoGameEngine.AudioManager.GetCurrentBGMVolume">
            <summary>
            Get the current volume level of the current BGM loop or intro.
            </summary>
            <returns>Returns -1 if no BGM is playing. Otherwise returns a floating-point value between 0.0f and 1.0f representing the volume of the audio file.</returns>
        </member>
        <member name="M:MonoGameEngine.AudioManager.SetBGMPitch(System.Single)">
            <summary>
            Allows the pitch of any currently playing BGM. 0.0f is the default. -1.0f -> 1.0f is the acceptable range of pitch.
            </summary>
            <param name="pitch">The value  desired pitch of the audio file. </param>
        </member>
        <member name="M:MonoGameEngine.AudioManager.PreLoadSFX(System.String)">
            <summary>
            Allows an audio file to be loaded into the game before being played. This method should be called if your audio files are being delayed when first played.
            </summary>
            <param name="filename">The name of the desired sound effect.</param>
        </member>
        <member name="T:MonoGameEngine.SFXOverlapRule">
            <summary>
            Controls how sound effects are handled when a request to play an existing sound is made.
            <br/>- <strong>Ignore</strong> discards any extra sfx of the same name. 
            <br/>- <strong>Overwrite</strong> replaces the current instance of the sfx.
            <br/>- <strong>Overlay</strong> allows multiples of a single sfx to play at once.
            </summary>
        </member>
        <member name="T:MonoGameEngine.SFX">
            <summary>A class representing an audio asset within the game engine. Can be used for BGM as well as sound effects.</summary>
        </member>
        <member name="M:MonoGameEngine.SFX.Dispose">
            <summary>
            Method used to clean the memory allocated for this sound effect.
            </summary>
        </member>
        <member name="M:MonoGameEngine.SFX.IsPlaying">
            <summary>
            Getter method which checks to see if this SFX is currently playing.
            </summary>
            <returns>Returns 'true' if the SFX is active. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.SFX.IsStopped">
            <summary>
            Getter method which checks to see if this SFX is currently stopped.
            </summary>
            <returns>Returns 'true' if the SFX is not currently playing. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.SFX.GetName">
            <summary>
            Getter method which returns the name associated with this SFX.
            </summary>
            <returns>A string object representing the name of this SFX's audio file.</returns>
        </member>
        <member name="M:MonoGameEngine.SFX.Play">
            <summary>
            Starts playing the audio file held by this SFX.
            </summary>
        </member>
        <member name="M:MonoGameEngine.SFX.Stop">
            <summary>
            Stops the audio file held by this SFX.
            </summary>
        </member>
        <member name="M:MonoGameEngine.SFX.Pause">
            <summary>
            Pauses the audio file held by this SFX. If resumed, file will continue from where it paused.
            </summary>
        </member>
        <member name="M:MonoGameEngine.SFX.Resume">
            <summary>
            Resumes playback of the audio file if it was previously paused. Will resume from the point it was paused.
            </summary>
        </member>
        <member name="M:MonoGameEngine.SFX.IsLooping">
            <summary>
            Getter method which checks if this SFX will has looping playback enabled.
            </summary>
            <returns>A boolean value representing whether or not the audio will repeat when finished.</returns>
        </member>
        <member name="M:MonoGameEngine.SFX.WillBlockBGM">
            <summary>
            Getter method which checks if this SFX will pause any background music when played.
            </summary>
            <returns>A boolean value representing whether or not the audio pauses existing background music while playing.</returns>
        </member>
        <member name="M:MonoGameEngine.SFX.GetState">
            <summary>
            Getter method which returns the SoundState of this SFX. Useful for digging into the state of this object a little deeper.
            </summary>
            <returns>A SoundState enum which contains the underlying state of this SFX's audio.</returns>
        </member>
        <member name="M:MonoGameEngine.SFX.SetVolume(System.Single)">
            <summary>
            Setter method which can adjust the playback volume of this SFX's audio.
            </summary>
            <param name="volume">The volume at which to play this SFX's audio. Should be between 0.0f and 1.0f.</param>
        </member>
        <member name="M:MonoGameEngine.SFX.GetVolume">
            <summary>
            Getter method which returns the current volume that this SFX is playing at.
            </summary>
            <returns>A floating-point value (between 0.0f and 1.0f) that represents the volume of this SFX's audio playback.</returns>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObjects.Components.DrawableComponent.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            A simple Draw method to quickly get a sprite onto the game screen.
            </summary>
            <param name="spriteBatch">The utility used to render sprites within MonoGame.</param>
            <param name="position">The position, in pixels, to draw the sprite on-screen.</param>
            <param name="image">The desired sprite image.</param>
            <param name="color">[Optional] The base colour of the image.</param>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObjects.Components.DrawableComponent.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            A simple Draw method to quickly get text onto the game screen.
            </summary>
            <param name="spriteBatch">The utility used to render sprites within MonoGame.</param>
            <param name="position">The position, in pixels, to draw the sprite on-screen.</param>
            <param name="font">The desired SpriteFont to use.</param>
            <param name="text">The string of text that should be rendered.</param>
            <param name="color">[Optional] The base colour of the text.</param>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObjects.Components.DrawableComponent.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Draw method for rendering a specific frame of animation within a spritesheet.
            </summary>
            <param name="spriteBatch">The utility used to render sprites within MonoGame.</param>
            <param name="drawLocation">Represents where on screen to draw the animation frame. Handles position, width and height.</param>
            <param name="animationFrame">The dimensions, in pixels, of the animation frame within the spritesheet</param>
            <param name="spritesheet">The full source spritesheet image.</param>
            <param name="color">[Optional] The base colour of the image.</param>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObjects.Components.InputComponent.Update(System.Single)">
            <summary>
            Automatically updates this Component's Keyboard state and tries to handle any relevant inputs. Can be overridden.
            </summary>
            <param name="deltaTime">The amount of time that has passed since the last frame, in seconds. Taken from MonoGame's GameTime object.</param>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObjects.Components.InputComponent.HandleInput(System.Single)">
            <summary>
            Allows the component to recognise key presses and respond as appropriate.
            </summary>
            /// <param name="deltaTime">The amount of time that has passed since the last frame, in seconds. Taken from MonoGame's GameTime object.</param>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObjects.Components.InputComponent.IsKeyPressed(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines whether or not this is the first frame that the given key has been pushed.
            </summary>
            <param name="key">The specific keyboard key of interest.</param>
            <returns>Returns 'true' if the given key was not down last frame; otherwise returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObjects.Components.InputComponent.IsKeyHeld(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines whether or not the given key is being pushed, and was also pushed last frame.
            </summary>
            <param name="key">The specific keyboard key of interest.</param>
            <returns>Returns 'true' if the given key is currently down, and was also down last frame; otherwise returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObjects.Components.InputComponent.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines whether or not the given key is currently pushed, irrespective of its previous state.
            </summary>
            <param name="key">The specific keyboard key of interest.</param>
            <returns>Returns 'true' if the given key is currently down, regardless of if it was down last frame or not; otherwise returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObjects.Components.InputComponent.IsKeyReleased(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines whether or not the given key was released within the last frame.
            </summary>
            <param name="key">The specific keyboard key of interest.</param>
            <returns>Returns 'true' if the given key was down last frame, but is currently released; otherwise returns 'false'.</returns>
        </member>
        <member name="F:MonoGameEngine.ComponentCore.GameObject._components">
            <summary>
            A collection of all the Components attached to this GameObject. 
            </summary>
        </member>
        <member name="F:MonoGameEngine.ComponentCore.GameObject._gameCore">
            <summary>
            A reference to the GameCore, allowing access to some high-level functionality.
            </summary>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObject.SendMessage(MonoGameEngine.ComponentCore.MessageType,System.String)">
            <summary>
            Method used to send a message to all of this GameObject's Components.
            </summary>
            <param name="messageType">The MessageType allows Components to ignore or listen for specific kinds of messages.</param>
            <param name="message"></param>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObject.AddComponent(MonoGameEngine.ComponentCore.GameObjects.Components.Component)">
            <summary>
            Used to assign a new Component to this GameObject.
            </summary>
            <param name="component">A Component instance must be assigned.</param>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObject.GetComponent``1">
            <summary>
            Retrieve an assigned Component of the requested type, if one exists.
            </summary>
            <typeparam name="T">The type of Component that you would like to look for.</typeparam>
            <returns>Returns the requested Component if found; otherwise, returns 'null' if no Component of the requested type belongs to this GameObject.</returns>
        </member>
        <member name="F:MonoGameEngine.ComponentCore.Screens.Screen._core">
            <summary>
            A reference to the GameCore, allowing access to some high-level functionality.
            </summary>
        </member>
        <member name="F:MonoGameEngine.ComponentCore.Screens.Screen._gameObjects">
            <summary>
            A collection of all the GameObjects existing in this Screen. All new GameObjects should be placed in this collection for automatic updating and rendering.
            </summary>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.Screens.Screen.AddObject(MonoGameEngine.ComponentCore.GameObject)">
            <summary>
            Allows a GameObject to be added to the automatic update and render collection.
            </summary>
            <param name="obj">The new GameObject for the Screen to handle.</param>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.Screens.Screen.GetObjects">
            <summary>
            Allows access to the entire collection of GameObjects currently handled by the Screen.
            </summary>
            <returns>A standard array of GameObjects.</returns>
        </member>
        <member name="T:MonoGameEngine.ComponentCore.MessageType">
            <summary></summary>
        </member>
        <member name="T:MonoGameEngine.Core">
            <summary>A class which represents the highest-level functionality of a game project.</summary>
        </member>
        <member name="M:MonoGameEngine.Core.#ctor">
            <summary>The constructor for this class.</summary>
        </member>
        <member name="M:MonoGameEngine.Core.Initialize">
            <summary>Performs initial setup for various systems. <br/><b>Should always call base.Initialize() in derived classes.</b></summary>
        </member>
        <member name="M:MonoGameEngine.Core.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:MonoGameEngine.Core.SwapScreen">
            <summary>
            Performs the actual hand-off of an instantiated new Screen to the Core's managed reference.
            </summary>
        </member>
        <member name="M:MonoGameEngine.Core.StartScreen``1">
            <summary>
            This method allows a new Screen derivative to be created and start running in place of the current one, if one exists.
            </summary>
            <typeparam name="TScreen">The Type of Screen that you would like to start.</typeparam>
        </member>
        <member name="M:MonoGameEngine.Core.UpdateScreen(System.Single)">
            <summary>
            Handles the top-level Screen instance operation.
            </summary>
            <param name="deltaTime">The time (in seconds) since the last frame of the game.</param>
        </member>
        <member name="M:MonoGameEngine.Core.GetContent">
            <summary>
            A getter method for this Core's ContentManager.
            </summary>
            <returns>Returns the game's ContentManager instance.</returns>
        </member>
        <member name="M:MonoGameEngine.Core.GetResource``1(System.String)">
            <summary>
            Handles the loading of a desired resource. 
            </summary>
            <typeparam name="T">The Type of the resource required.</typeparam>
            <param name="resourceName">The name of the desired resource. Filetype suffix is not required.</param>
            <returns>Returns the requested media resource if found, otherwise throws an error.</returns>
        </member>
        <member name="M:MonoGameEngine.Core.GetWindow">
            <summary>
            A getter method for this Core's GameWindow.
            </summary>
            <returns>Returns the game's GameWindow instance.</returns>
        </member>
        <member name="M:MonoGameEngine.Core.GetRandomNumber(System.Int32)">
            <summary>
            A method which generates a pseudo-random integer value from 0 to the upper bound provided.
            </summary>
            <param name="max">The upper bound to the random number generation (non-inclusive). If a value below 0 is entered, the maximum bound will be set to 0.</param>
            <returns>Returns a whole number within the established range.</returns>
        </member>
        <member name="M:MonoGameEngine.Core.GetRandomNumber(System.Single)">
            <summary>
            [Overload] A method which generates a pseudo-random floating-point value from 0 to the upper bound provided.
            </summary>
            <param name="max">The upper bound to the random number generation (non-inclusive). If a value below 0 is entered, the maximum bound will be set to 0.</param>
            <returns>Returns a floating-point number within the established range.</returns>
        </member>
        <member name="M:MonoGameEngine.Core.GetRandomNumber(System.Single,System.Single)">
            <summary>
            [Overload] A method which generates a pseudo-random floating-point value from the lower bound to the upper bound provided.<br/>If the min is greater than the max provided, the two values will be swapped.
            </summary>
            <param name="min">The lower bound of the random number generation (inclusive).</param>
            <param name="max">The upper bound to the random number generation (non-inclusive). If a value below 0 is entered, the maximum bound will be set to 0.</param>
            <returns>Returns a floating-point number within the established range.</returns>
        </member>
        <member name="M:MonoGameEngine.Core.EndGame">
            <summary>
            The game will stop updating once this method is called.
            </summary>
        </member>
        <member name="M:MonoGameEngine.Core.PrintFPS">
            <summary>
            An estimation of the current FPS (frames per second) will be printed to the program's output window.
            </summary>
        </member>
        <member name="M:MonoGameEngine.Core.Schedule(System.Object,System.String,System.Object[],System.Single)">
            <summary>
            The Core will call the method belonging to the specified object after the specified time has elapsed. <br/><b>Note:</b> This is an expensive way to call the desired method, and should only be used as a last resort.
            </summary>
            <param name="callingObject">The object that the desired method belongs to.</param>
            <param name="methodName">The name of the method that should be called, which belongs to the given object.</param>
            <param name="arguments">A generic array of values that should be handed to the desired method when invoked. The values should be in the same order and of the same type as the method would normally recieve.</param>
            <param name="scheduleFor">The time, in seconds, that should be waited before the method is invoked.</param>
        </member>
        <member name="M:MonoGameEngine.Core.Schedule(System.Object,System.String,System.Object,System.Single)">
            <summary>
            [Overload] The Core will call the method belonging to the specified object after the specified time has elapsed. <br/><b>Note:</b> This is an expensive way to call the desired method, and should only be used as a last resort.
            </summary>
            <param name="callingObject">The object that the desired method belongs to.</param>
            <param name="methodName">The name of the method that should be called, which belongs to the given object.</param>
            <param name="argument">A generic value that should be handed to the desired method when invoked. The value supplied should be of the same type as the desired method would normally expect.</param>
            <param name="scheduleFor">The time, in seconds, that should be waited before the method is invoked.</param>
        </member>
        <member name="M:MonoGameEngine.Core.Pause(System.Single)">
            <summary>
            The game's entire update will pause for the requested duration (in seconds). Duration should be greater than 0. <br/>
            <strong>NOTE:</strong> This will also pause AudioManager, Transition and Camera2D, along with GameInput.
            </summary>
            <param name="duration">The timeframe (in seconds) that the game should pause for.</param>
        </member>
        <member name="T:MonoGameEngine.Extensions">
            <summary>Class which provides additional (extended) functionality for several other classes.</summary>
        </member>
        <member name="M:MonoGameEngine.Extensions.DrawRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Draws a filled rectangle at the given position with the dimensions requested.
            </summary>
            <param name="spriteBatch">The SpriteBatch currently being used to batch for rendering.</param>
            <param name="position">The position on-screen that the rectangle should be drawn at.</param>
            <param name="width">The desired width of the rectangle to be drawn.</param>
            <param name="height">The desired height of the rectangle to be drawn.</param>
            <param name="colour">[Optional] The desired rendering colour.</param>
        </member>
        <member name="M:MonoGameEngine.Extensions.DrawLine(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Draws a line segment from point1 to point 2.
            </summary>
            <param name="spriteBatch">The SpriteBatch currently being used to batch for rendering.</param>
            <param name="point1">The starting point of the desired line segment.</param>
            <param name="point2">The ending point of the desired line segment.</param>
            <param name="thickness">[Optional] The thickness of the line. 1.0f by default.</param>
            <param name="colour">[Optional] The desired rendering colour.</param>
        </member>
        <member name="M:MonoGameEngine.Extensions.DrawCircle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Draws a circle at a given origin with the requested radius. The circle will look smoother depending on how many points are requested.
            </summary>
            <param name="spriteBatch">The SpriteBatch currently being used to batch for rendering.</param>
            <param name="origin">The center point that the circle should use for rendering.</param>
            <param name="radius">The radius of the desired circle to be rendered.</param>
            <param name="points">[Optional] The number of points that make up the circle. 24 by default. The minimum acceptable number of points is 3.</param>
            <param name="thickness">[Optional] The thickness of the circle outline. 1.0f by default.</param>
            <param name="colour">[Optional] The desired rendering colour.</param>
        </member>
        <member name="M:MonoGameEngine.Extensions.Capitalise(System.String)">
            <summary>
            Converts a given string value into a form where the first character is uppercase, and the rest are lowercase.
            </summary>
            <param name="before">The string value before the capitalisation process begins.</param>
            <returns>Returns a string value where the first char has been capitalised and the rest converted to lowercase.</returns>
        </member>
        <member name="M:MonoGameEngine.Extensions.LinearConversion(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts the given value into a new range from an old one, maintaining the previous ratio.
            </summary>
            <param name="value">The value to convert</param>
            <param name="oldMin">The old range's minimum value.</param>
            <param name="oldMax">The old range's maximum value.</param>
            <param name="newMin">The new range's minimum value.</param>
            <param name="newMax">The new range's maximum value.</param>
            <returns>Returns a whole number in the new range, based on the ratio of the old range and the provided value.</returns>
        </member>
        <member name="M:MonoGameEngine.Extensions.LinearConversion(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            [Overload] Converts the given value into a new range from an old one, maintaining the previous ratio.
            </summary>
            <param name="value">The value to convert</param>
            <param name="oldMin">The old range's minimum value.</param>
            <param name="oldMax">The old range's maximum value.</param>
            <param name="newMin">The new range's minimum value.</param>
            <param name="newMax">The new range's maximum value.</param>
            <returns>Returns a decimal number in the new range, based on the ratio of the old range and the provided value.</returns>
        </member>
        <member name="M:MonoGameEngine.Extensions.LinearConversion(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            [Overload] Converts the given value into a new range from an old one, maintaining the previous ratio.
            </summary>
            <param name="value">The value to convert</param>
            <param name="oldMin">The old range's minimum value.</param>
            <param name="oldMax">The old range's maximum value.</param>
            <param name="newMin">The new range's minimum value.</param>
            <param name="newMax">The new range's maximum value.</param>
            <returns>Returns a decimal number in the new range, based on the ratio of the old range and the provided value.</returns>
        </member>
        <member name="T:MonoGameEngine.DataManagement.SaveFile">
            <summary>A class that can contain any necessary saved data for a game project. Generally used in conjunction with SaveManager.</summary>
        </member>
        <member name="F:MonoGameEngine.DataManagement.SaveFile._savedData">
            <summary>The data structure which holds all of the requested data. Set up as a key/value pair, where the value can be of varying data types.</summary>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveFile.#ctor(System.Int32)">
            <summary>
            Internal constructor method.
            </summary>
            <param name="fileIndex">Used to identify different saved files.</param>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveFile.AddData(System.String,System.Object)">
            <summary>
            Adds data to this SaveFile, using a Key/Value Pair.
            <br/>If the key already exists, the held value at the given key will be overwritten instead.
            </summary>
            <param name="key">The identifying key to this piece of data.</param>
            <param name="value">The data value you wish to store. This can be any primitive data type.</param>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveFile.RemoveData(System.String)">
            <summary>
            Removes data from this SaveFile with a given key, if any exists.
            </summary>
            <param name="key">The identifying key to the piece of data that should be removed.</param>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveFile.GetData``1(System.String)">
            <summary>
            Returns a piece of data with the associated given key, if that key exists within this SaveFile.
            </summary>
            <typeparam name="T">The data type of the data that has been requested.</typeparam>
            <param name="key">The identifying key to the desired piece of data.</param>
            <returns>The piece of data for the given key (if it exists), cast as the requested 'T' data type. Otherwise, returns appropriately-typed 'empty' data.</returns>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveFile.GetIndex">
            <summary>
            Getter method used to access the file index of this SaveFile.
            </summary>
            <returns>The numerical index for this file.</returns>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveFile.ToString">
            <summary>
            Converts this SaveFile object into a String, which can be written to an external text file.
            </summary>
            <returns>A String representation of the data held within this SaveFile object.</returns>
        </member>
        <member name="T:MonoGameEngine.DataManagement.SaveManager">
            <summary>A class which provides access to input/output needed for managing saved game data (using the SaveFile class).</summary>
        </member>
        <member name="P:MonoGameEngine.DataManagement.SaveManager.CurrentSave">
            <summary>Property that provides easy access to the most recently loaded SaveFile.</summary>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveManager.Save(MonoGameEngine.DataManagement.SaveFile,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Will save the passed Object to the allocated directory.
            </summary>
            <param name="saveFile">[Optional] The SaveFile which should be stored as a file on the machine's memory.</param>
            <param name="fileIndex">[Optional]An ID used to differentiate between different save files. Will use current save index if left empty.</param>
            <param name="append">[Optional] Should the save create a new file, or add to an existing one?</param>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveManager.Delete(System.Int32)">
            <summary>
            Will delete the save file at the given index, if it exists.
            </summary>
            <param name="fileIndex">The index of the file that should be deleted.</param>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveManager.Load(System.Int32)">
            <summary>
            Will load the desired SaveFile, if it exists. 
            </summary>
            <param name="fileIndex">The index of the file that should be loaded.</param>
            <returns>The SaveFile object holding the restored data at the given index, if it exists. Otherwise, returns an empty SaveFile for that index.</returns>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveManager.CreateDirectory(System.String)">
            <summary>
            Will create a location for files to be saved at the given directory, if one doesn't already exist.
            </summary>
            <param name="directory">The directory of the desired folder structure. Uses current directory of program as a root. </param>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveManager.CheckFileExists(System.String)">
            <summary>
            Checks to see if a file with the given filename exists. The filename should include the directory the file belongs to.
            </summary>
            <param name="filename">The filename of the file that should be checked. </param>
            <returns>Returns 'true' if a file with the given name exists. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveManager.GenerateFileDirectoryString">
            <summary>
            Creates a single String which describes the full directory filepath.
            </summary>
            <returns>A String object with the full directory filepath, assuming the main program folder as the root.</returns>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveManager.GenerateFilePath(System.Int32)">
            <summary>
            Creates a single String which describes the full directory filepath, plus the full file name.
            </summary>
            <param name="fileIndex">The specific save file ID that is desired. </param>
            <returns>A String object with the full directory filepath and file name, assuming the main program folder as the root.</returns>
        </member>
        <member name="T:MonoGameEngine.Settings">
            <summary>A handler class which manages several key settings for a game project.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.GameResolution">
            <summary>Property representing the internal resolution for the game to be rendered at (1280x720px by default). This is not the same as the game's window dimensions.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.ScreenDimensions">
            <summary>Property representing the game window's current dimensions. 1280x720px by default.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.IsFullscreen">
            <summary>Property representing the game's fullscreen state. False by default.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.IsMouseVisible">
            <summary>Property representing whether or not the mouse will appear above the game window.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.Vsync">
            <summary>Property representing the game's vsync flag. True by default.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.TargetFrameRate">
            <summary>Property representing the desired framerate for the game. Change this if the game is being run on weaker hardware. 60 by default. Values of below 0 will be clamped.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.IsBorderless">
            <summary>Property representing the game's window border flag. False by default.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.BackgroundFill">
            <summary>Property representing the game window's background colour. CornflowerBlue by default.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.LetterboxFill">
            <summary>Property representing the game window's letterboxing colour. Black by default.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.UseAntiAliasing">
            <summary>Property representing whether or not anti-aliasing (MSAA) is being applied to the game window.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.BGMVolume">
            <summary>Property representing the current BGM' volume, which is clamped between 0.0f and 1.0f. '1.0f' by default.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.GameSpeed">
            <summary>Property representing a global multiplier applied to deltaTime. 1.0f by default. Property is automatically clamped between 0.25f and 4.0f.<br/><u>Does not affect framerate/FPS. Only natively affects values relating to deltaTime.</u></summary>
        </member>
        <member name="P:MonoGameEngine.Settings.UsePositionalAudio">
            <summary>Property representing whether or not the game should pan and scale the volume of sound effects in the game based on the position of the camera. False by default.</summary>
        </member>
        <member name="M:MonoGameEngine.Settings.Initialise(MonoGameEngine.Core,Microsoft.Xna.Framework.GraphicsDeviceManager)">
            <summary>Function for initial setup of the game's Settings. <b>Can only be called once, and this is done automatically by the game's Core</b>.</summary>
            <param name="graphics">The graphics manager for the game. Instance should be created by Core.</param>
            <param name="core">The Core instance at the center of this game project.</param>
        </member>
        <member name="T:MonoGameEngine.Camera2D">
            <summary>A class that represents the game's viewport.</summary>
        </member>
        <member name="P:MonoGameEngine.Camera2D.Instance">
            <summary>Provides access to this Camera2D object.</summary>
        </member>
        <member name="P:MonoGameEngine.Camera2D.Easing">
            <summary>The amount of easing applied to the Camera2D's movement. More easing will further smooth the movement towards the target. A value of '0' will apply no easing.</summary>
        </member>
        <member name="P:MonoGameEngine.Camera2D.ClampWithinWorld">
            <summary>Controls whether or not the camera will prevent movement beyond the bounds of the current world. 'false' by default.</summary>
        </member>
        <member name="M:MonoGameEngine.Camera2D.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MonoGameEngine.Camera2D.Initialise(MonoGameEngine.Core)">
            <summary>
            
            </summary>
            <param name="core"></param>
        </member>
        <member name="M:MonoGameEngine.Camera2D.Update(System.Single)">
            <summary>
            
            </summary>
            <param name="deltaTime"></param>
        </member>
        <member name="P:MonoGameEngine.Camera2D.Offset">
            <summary>
            
            </summary>
        </member>
        <member name="P:MonoGameEngine.Camera2D.HorizontalLock">
            <summary>
            
            </summary>
        </member>
        <member name="P:MonoGameEngine.Camera2D.VerticalLock">
            <summary>
            
            </summary>
        </member>
        <member name="P:MonoGameEngine.Camera2D.Center">
            <summary>
            
            </summary>
        </member>
        <member name="M:MonoGameEngine.Camera2D.WorldToScreen(Microsoft.Xna.Framework.Vector2)">
            <summary>
            
            </summary>
            <param name="worldPosition"></param>
            <returns></returns>
        </member>
        <member name="M:MonoGameEngine.Camera2D.ScreenToWorld(Microsoft.Xna.Framework.Vector2)">
            <summary>
            
            </summary>
            <param name="screenPosition"></param>
            <returns></returns>
        </member>
        <member name="M:MonoGameEngine.Camera2D.Move(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Moves the Camera2D's offset by the given amount.
            </summary>
            <param name="amount">A Vector2 representing the amount to move the Camera2D by, along the x and y axes respectively.</param>
        </member>
        <member name="M:MonoGameEngine.Camera2D.Move(System.Single,System.Single)">
            <summary>
            [Overload] Moves the Camera2D's offset by the given amount.
            </summary>
            <param name="x">A floating point value representing the desired movement in the horizontal axis.</param>
            <param name="y">A floating point value representing the desired movement in the vertical axis.</param>
        </member>
        <member name="M:MonoGameEngine.Camera2D.Follow(MonoGameEngine.StandardCore.GameObject,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="gameObject">The GameObject that the camera should follow in world space.</param>
            <param name="easeToTarget">A boolean value that determines whether the camera should ease to the new target, or jump directly to it.</param>
            <param name="lockHorizontal">A boolean value which sets the HorizontalLock of the Camera2D.</param>
            <param name="lockVertical">A boolean value which sets the VerticalLock of the Camera2D.</param>
        </member>
        <member name="P:MonoGameEngine.Camera2D.Zoom">
            <summary>
            
            </summary>
        </member>
        <member name="P:MonoGameEngine.Camera2D.Rotation">
            <summary>
            
            </summary>
        </member>
        <member name="M:MonoGameEngine.Camera2D.Ease(System.Single)">
            <summary>
            
            </summary>
            <param name="deltaTime"></param>
        </member>
        <member name="M:MonoGameEngine.Camera2D.Shake(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="strength"></param>
            <param name="duration"></param>
        </member>
        <member name="M:MonoGameEngine.Camera2D.CalculateMouseScreenPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            
            </summary>
            <param name="rawPosition"></param>
            <returns></returns>
        </member>
        <member name="M:MonoGameEngine.Camera2D.GetViewTransformationMatrix">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoGameEngine.Camera2D.BeginDraw">
            <summary>
            
            </summary>
        </member>
        <member name="M:MonoGameEngine.Camera2D.EndDraw">
            <summary>
            
            </summary>
        </member>
        <member name="M:MonoGameEngine.Camera2D.GetRender">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoGameEngine.Camera2D.GetRenderRectangle">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoGameEngine.Camera2D.RecalculateTransformationMatrices">
            <summary>
            
            </summary>
        </member>
        <member name="M:MonoGameEngine.Camera2D.GetMovementThisFrame">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoGameEngine.Camera2D.IsFollowingTarget">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoGameEngine.Camera2D.WithinFrustum(MonoGameEngine.StandardCore.GameObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MonoGameEngine.IScreen.Start(MonoGameEngine.Core)">
            <summary>
            Method used to automatically setup the screen before it begins.
            </summary>
        </member>
        <member name="M:MonoGameEngine.IScreen.End">
            <summary>
            Method used to clear any created instances held by this Screen. Automatically called before a new Screen is started.
            </summary>
        </member>
        <member name="M:MonoGameEngine.IScreen.Update(System.Single)">
            <summary>
            Method used to send out update requests to all registered GameObjects belonging to this Screen. Called (roughly) 60 frames per second.
            </summary>
            <param name="deltaTime">The amount of time that has passed since the last frame, in seconds. Taken from MonoGame's GameTime object.</param>
        </member>
        <member name="M:MonoGameEngine.IScreen.Render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Method used to render any registered GameObjects.
            </summary>
            <param name="spriteBatch">The SpriteBatch of the current GameCore.</param>
        </member>
        <member name="T:MonoGameEngine.MouseButton">
            <summary>Enum representing the three main mouse buttons. Used when handling mouse click inputs.
            <br/>- <strong>Left</strong> represents a left mouse button click.
            <br/>- <strong>Right</strong> represents a right mouse button click.
            <br/>- <strong>Middle</strong> represents a middle mouse button click.
            </summary>
        </member>
        <member name="T:MonoGameEngine.GameInput">
            <summary>A class which gives access to low-level input capturing for keyboard and mouse.</summary>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsKeyHeld(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Check to see if key has been held for more than one frame.
            </summary>
            <param name="key">The key to check.</param>
            <returns>Returns 'true' if the chosen key has been pressed for at least this frame and the last. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsKeyHeld(System.String)">
            <summary>
            [Overload] Check to see if key has been held for more than one frame.
            </summary>
            <param name="key">A string representing the name of the key to check.</param>
            <returns>Returns 'true' if the chosen key has been pressed for at least this frame and the last. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsKeyPressed(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Check to see if this is the first frame the key has been pressed down.
            </summary>
            <param name="key">The key to check.</param>
            <returns>Returns 'true' if the chosen key was first pressed this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsKeyPressed(System.String)">
            <summary>
            [Overload] Check to see if this is the first frame the key has been pressed down.
            </summary>
            <param name="key">A string representing the name of the key to check.</param>
            <returns>Returns 'true' if the chosen key was first pressed this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsKeyReleased(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Check to see if the key was released this frame.
            </summary>
            <param name="key">The key to check.</param>
            <returns>Returns 'true' if the chosen key was first released on this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsKeyReleased(System.String)">
            <summary>
            [Overload] Check to see if the key was released this frame.
            </summary>
            <param name="key">A string representing the name of the key to check.</param>
            <returns>Returns 'true' if the chosen key was first released on this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.SetGamePadVibration(System.Single,System.Int32)">
            <summary>
            Set the vibration strength of the chosen player's gamepad. 
            </summary>
            <param name="vibrationStrength">The strength with which to vibrate the gamepad. Should be between 0.0f and 1.0f.</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 4.</param>
        </member>
        <member name="M:MonoGameEngine.GameInput.SetGamePadVibration(System.Single,System.Single,System.Int32)">
            <summary>
            [Overload] Set the vibration strength of the chosen player's gamepad. 
            </summary>
            <param name="leftVibration">The strength with which to vibrate the gamepad's left motor. Should be between 0.0f and 1.0f.</param>
            <param name="rightVibration">The strength with which to vibrate the gamepad's right motor. Should be between 0.0f and 1.0f.</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 4.</param>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsGamePadButtonPressed(Microsoft.Xna.Framework.Input.Buttons,System.Int32)">
            <summary>
            Check to see if this is the first frame the button on the specified gamepad has been pressed down.
            </summary>
            <param name="button">The specified button to check for.</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 4.</param>
            <returns>Returns 'true' if the chosen button was first pressed this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsGamePadButtonPressed(System.String,System.Int32)">
            <summary>
            [Overload] Check to see if this is the first frame the button on the specified gamepad has been pressed down.
            </summary>
            <param name="button">A string representing the name of the button to check for.</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 4.</param>
            <returns>Returns 'true' if the chosen button was first pressed this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsGamePadButtonHeld(Microsoft.Xna.Framework.Input.Buttons,System.Int32)">
            <summary>
            Check to see if button on the specified gamepad has been held for more than one frame.
            </summary>
            <param name="button">The specified button to check for.</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 4.</param>
            <returns>Returns 'true' if the chosen button has been pressed for at least this frame and the last. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsGamePadButtonHeld(System.String,System.Int32)">
            <summary>
            [Overload] Check to see if button on the specified gamepad has been held for more than one frame.
            </summary>
            <param name="button">A string representing the name of the button to check for.</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 4.</param>
            <returns>Returns 'true' if the chosen button has been pressed for at least this frame and the last. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsGamePadButtonReleased(Microsoft.Xna.Framework.Input.Buttons,System.Int32)">
            <summary>
            Check to see if the button on the specified gamepad was released this frame.
            </summary>
            <param name="button">The specified button to check for.</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 4.</param>
            <returns>Returns 'true' if the chosen button was first released on this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsGamePadButtonReleased(System.String,System.Int32)">
            <summary>
            [Overload] Check to see if the button on the specified gamepad was released this frame.
            </summary>
            <param name="button">A string representing the name of the button to check for.</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 4.</param>
            <returns>Returns 'true' if the chosen button was first released on this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.GetGamePadStickAxis(System.String,System.Int32)">
            <summary>
            Checks the position of the specified stick on the requested gamepad.
            </summary>
            <param name="stick">A string representing the name of the stick to check for. Should be either "Left" or "Right".</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 4.</param>
            <returns>Returns the normalised direction vector of the specified stick. Otherwise, returns (0,0) if stick is untouched or not found.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.GetGamePadTriggerPress(System.String,System.Int32)">
            <summary>
            Checks how far the specified trigger has been pressed. '1.0f' would be a full press.
            </summary>
            <param name="trigger">A string representing the name of the trigger to check for. Should be either "Left" or "Right".</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 4.</param>
            <returns>Returns a floating-point value representing the strength of the press on the requested trigger. '1.0f' would be a full press.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsMouseButtonHeld(MonoGameEngine.MouseButton)">
            <summary>
            Check to see if mouse button has been held for more than one frame.
            </summary>
            <param name="button">An enum representing the mouse button to check.</param>
            <returns>Returns 'true' if the chosen mouse button has been pressed for at least this frame and the last. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsMouseButtonHeld(System.String)">
            <summary>
            Check to see if mouse button has been held for more than one frame.
            </summary>
            <param name="button">A string representing the name of the button to check for.</param>
            <returns>Returns 'true' if the chosen mouse button has been pressed for at least this frame and the last. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsMouseButtonPressed(MonoGameEngine.MouseButton)">
            <summary>
            Check to see if this is the first frame the mouse button has been pressed down.
            </summary>
            <param name="button">An enum representing the mouse button to check.</param>
            <returns>Returns 'true' if the chosen mouse button was first pressed this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsMouseButtonPressed(System.String)">
            <summary>
            [Overload] Check to see if this is the first frame the mouse button has been pressed down.
            </summary>
            <param name="button">A string representing the name of the button to check for.</param>
            <returns>Returns 'true' if the chosen mouse button was first pressed this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsMouseButtonReleased(MonoGameEngine.MouseButton)">
            <summary>
            Check to see if the mouse button was released this frame.
            </summary>
            <param name="button">An enum representing the mouse button to check.</param>
            <returns>Returns 'true' if the chosen mouse button was released this frame, otherwise returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsMouseButtonReleased(System.String)">
            <summary>
            [Overload] Check to see if the mouse button was released this frame.
            </summary>
            <param name="button">A string representing the name of the button to check for.</param>
            <returns>Returns 'true' if the chosen mouse button was released this frame, otherwise returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.GetMousePosition">
            <summary>
            Get the position co-ordinates of the mouse cursor, relative to the primary window.
            </summary>
            <returns>A Vector2 object containing the co-ordinates of the mouse cursor.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.SetMousePosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Set the mouse cursor position, relative to the active window. (0,0) is the top-left corner.
            </summary>
            <param name="mousePosition">The co-ordinates to set the mouse cursor to.</param>
        </member>
        <member name="M:MonoGameEngine.GameInput.GetConnectedGamePadCount">
            <summary>
            Get the number of active, connected gamepads.
            </summary>
            <returns>An integer value representing the number of active gamepads.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsMouseOnScreen">
            <summary>
            Check to see if the mouse cursor is still currently on the displayed Screen.
            </summary>
            <returns>Returns 'true' if the mouse cursor is within the bounds of the current Screen. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.Update(System.Single)">
            <summary>
             Method used to refresh the keyboard states used when handling key presses. <b>Automatically handled by the game's Core</b>.
            </summary>
        </member>
        <member name="M:MonoGameEngine.GameInput.InitialiseGamePads">
            <summary>
            Initialise support for input from GamePads. Called automatically by the game's Core.
            </summary>
        </member>
        <member name="M:MonoGameEngine.GameInput.UpdateGamePads">
            <summary>
            Update each GamePad in turn.
            </summary>
        </member>
        <member name="T:MonoGameEngine.Maths.InterpolationType">
            <summary>Enum used to trigger different methods of interpolation.
            <br/>- <strong>Lerp</strong> uses the standard linear interpolation formula. Has no easing applied.
            <br/>- <strong>SmoothLerp</strong> uses the standard linear interpolation formula, with easing applied.
            <br/>- <strong>Slerp</strong> uses a spherical interpolation formula, which creates a different kind of easing effect to SmoothLerp.
            </summary>
        </member>
        <member name="T:MonoGameEngine.Maths.Interpolation">
            <summary>A static helper class which can be used to call upon several useful interpolation methods.</summary>
        </member>
        <member name="M:MonoGameEngine.Maths.Interpolation.SmoothLerp(System.Single,System.Single,System.Single)">
            <summary>
            Linear interpolation with smoothing applied.
            </summary>
            <param name="point1">The start of the range.</param>
            <param name="point2">The end of the range.</param>
            <param name="time">The time along the interpolation curve.</param>
            <returns>The floating-point value between point1 and point2, at the given time.</returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Interpolation.SmoothLerp(System.Int32,System.Int32,System.Single)">
            <summary>
            [Overload] Standard linear interpolation with smoothing applied.
            </summary>
            <param name="point1">The start of the range.</param>
            <param name="point2">The end of the range.</param>
            <param name="time">The time along the interpolation curve.</param>
            <returns>The integer value between point1 and point2, at the given time.</returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Interpolation.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Standard linear interpolation calculator.
            </summary>
            <param name="point1">The start of the range.</param>
            <param name="point2">The end of the range.</param>
            <param name="time">The time along the interpolation curve.</param>
            <returns>The floating-point value between point1 and point2, at the given time.</returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Interpolation.Lerp(System.Int32,System.Int32,System.Single)">
            <summary>
            [Overload] Standard linear interpolation calculator.
            </summary>
            <param name="point1">The start of the range.</param>
            <param name="point2">The end of the range.</param>
            <param name="time">The time along the interpolation curve.</param>
            <returns>The integer value between point1 and point2, at the given time.</returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Interpolation.Slerp(System.Single,System.Single,System.Single)">
            <summary>
            Spherical linear interpolation calculator, with smoothing applied.
            </summary>
            <param name="point1">The start of the range.</param>
            <param name="point2">The end of the range.</param>
            <param name="time">The time along the interpolation curve.</param>
            <returns>The floating-point value between point1 and point2, at the given time.</returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Interpolation.Slerp(System.Int32,System.Int32,System.Single)">
            <summary>
            [Overload] Spherical linear interpolation calculator, with smoothing applied.
            </summary>
            <param name="point1">The start of the range.</param>
            <param name="point2">The end of the range.</param>
            <param name="time">The time along the interpolation curve.</param>
            <returns>The integer value between point1 and point2, at the given time.</returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Interpolation.InverseLerp(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Determines where a given value lies within a range.
            </summary>
            <param name="point1">The start of the range.</param>
            <param name="point2">The end of the range.</param>
            <param name="value">The point within the range you want to calculate.</param>
            <param name="clamp">[Optional] Sets whether or not to clamp the returned value between 0 and 1.</param>
            <returns>The floating-point value representing where the value parameter falls within the given range.<br/>This value can be clamped or extrapolated based on the clamp parameter.</returns>
        </member>
        <member name="T:MonoGameEngine.Maths.InterpolationData">
            <summary>
            Class intended to represent every aspect of Linear Interpolation, in one handy object.<br></br>
            Please ensure the number of StartValues and EndValues are the identical.
            </summary>
        </member>
        <member name="P:MonoGameEngine.Maths.InterpolationData.Type">
            <summary>The type of interpolation that should be performed.</summary>
        </member>
        <member name="P:MonoGameEngine.Maths.InterpolationData.LerpTime">
            <summary>How far along the interpolation timeline this data is, generally between 0.0 and 1.0.</summary>
        </member>
        <member name="P:MonoGameEngine.Maths.InterpolationData.SpeedMultiplier">
            <summary>How quickly the data reaches 1.0f LerpTime.</summary>
        </member>
        <member name="P:MonoGameEngine.Maths.InterpolationData.CurrentValues">
            <summary>A collection of 'current' values, based on the current LerpTime and the StartValues and EndValues provided.</summary>
        </member>
        <member name="P:MonoGameEngine.Maths.InterpolationData.StartValues">
            <summary>A collection of floating-point 'start' values.</summary>
        </member>
        <member name="P:MonoGameEngine.Maths.InterpolationData.EndValues">
            <summary>A collection of floating-point 'end' values.</summary>
        </member>
        <member name="M:MonoGameEngine.Maths.InterpolationData.#ctor(System.Single[],System.Single[],System.Single,MonoGameEngine.Maths.InterpolationType)">
            <summary>
            The main constructor for the class. Uses raw float arrays of values that can handle any number of entries.
            </summary>
            <param name="startValues">A generic array of float values.</param>
            <param name="endValues">A generic array of float values.</param>
            <param name="speed">A float value which defaults to 1.0f (the interpolation will take exactly 1 second).</param>
            <param name="type">An enum which dictates the type of interpolation to perform.</param>
        </member>
        <member name="M:MonoGameEngine.Maths.InterpolationData.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,MonoGameEngine.Maths.InterpolationType)">
            <summary>
            The overloaded constructor for the class. Accepts the MonoGame-specific Vector2 class objects. Useful for moving 2d objects.
            </summary>
            <param name="startValue">A Vector2 object starting values.</param>
            <param name="endValue">A Vector2 object ending values.</param>
            <param name="speed">A float value which defaults to 1.0f (the interpolation will take exactly 1 second).</param>
            <param name="type">An enum which dictates the type of interpolation to perform.</param>
        </member>
        <member name="M:MonoGameEngine.Maths.InterpolationData.UpdateValues(System.Single)">
            <summary>
            Performs the interpolation between the start and end positions given. Also updates the current lerp time using the deltaTime parameter.
            </summary>
            <param name="deltaTime">A generic float value is used, to decouple from the Monogame framework's GameTime construct.</param>
        </member>
        <member name="T:MonoGameEngine.Maths.Noise">
            <summary>Noise is unfinished and currently does not work due to the ComputePerlinNoise method.</summary>
        </member>
        <member name="M:MonoGameEngine.Maths.Noise.GenerateNoiseMap(System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Single,System.Single,Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>
            
            </summary>
            <param name="mapWidth"></param>
            <param name="mapHeight"></param>
            <param name="seed"></param>
            <param name="scale"></param>
            <param name="octaves"></param>
            <param name="persistance"></param>
            <param name="lacunarity"></param>
            <param name="offset"></param>
            <param name="seamless"></param>
            <returns></returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Noise.GenerateNoiseMap(System.Int32,System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            [Overload] 
            </summary>
            <param name="mapWidth"></param>
            <param name="mapHeight"></param>
            <param name="seed">[Optional] </param>
            <param name="seamless">[Optional] </param>
            <returns></returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Noise.ComputePerlinNoise(System.Single,System.Single)">
            <summary>
            Based on Ken Perlin's original noise algorithm, converted to C#.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Noise.DotGridGradient(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Computes the dot product of the distance and gradient vectors.
            </summary>
            <param name="ix"></param>
            <param name="iy"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Noise.RandomGradient(System.Int32,System.Int32)">
            <summary>
            Create pseudorandom direction vector
            </summary>
            <param name="ix"></param>
            <param name="iy"></param>
            <returns></returns>
        </member>
        <member name="T:MonoGameEngine.Maths.Wave">
            <summary>A static helper class which can be used to perform some useful Sin and Cos wave functionality.</summary>
        </member>
        <member name="M:MonoGameEngine.Maths.Wave.Sin(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A simple wrapper method for generating a y-axis position value along a sine wave.
            </summary>
            <param name="amplitude">The 'height' of the wave.</param>
            <param name="frequency">The number of 'cycles' per second.</param>
            <param name="time">The current time, in seconds. Specifies the y-position along the wave that we want.</param>
            <param name="offset">The amount to offset the generate y-position by.</param>
            <returns>The y-axis value of the given sine waveform at the requested time.</returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Wave.Cos(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A simple wrapper method for generating a y-axis position value along a cosine wave.
            </summary>
            <param name="amplitude">The 'height' of the wave.</param>
            <param name="frequency">The number of 'cycles' per second.</param>
            <param name="time">The current time, in seconds. Specifies the y-position along the wave that we want.</param>
            <param name="offset">The amount to offset the generate y-position by.</param>
            <returns>The y-axis value of the given cosine waveform at the requested time.</returns>
        </member>
        <member name="M:MonoGameEngine.Extended.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGameEngine.Extended.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
                Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation,
                origin, scale, effects and layer.
            </summary>
            <param name="spriteBatch"></param>
            <param name="bitmapFont">A font for displaying text.</param>
            <param name="text">The text message to display.</param>
            <param name="position">The location (in screen coordinates) to draw the text.</param>
            <param name="color">
                The <see cref="T:Microsoft.Xna.Framework.Color" /> to tint a sprite. Use <see cref="P:Microsoft.Xna.Framework.Color.White" /> for full color with no
                tinting.
            </param>
            <param name="rotation">Specifies the angle (in radians) to rotate the text about its origin.</param>
            <param name="origin">The origin for each letter; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effect">Effects to apply.</param>
            <param name="layerDepth">
                The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer.
                Use SpriteSortMode if you want sprites to be sorted during drawing.
            </param>
            <param name="clippingRectangle">Clips the boundaries of the text so that it's not drawn outside the clipping rectangle</param>
        </member>
        <member name="M:MonoGameEngine.Extended.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGameEngine.Extended.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
                Adds a string to a batch of sprites for rendering using the specified font, text, position, color, rotation,
                origin, scale, effects and layer.
            </summary>
            <param name="spriteBatch"></param>
            <param name="font">A font for displaying text.</param>
            <param name="text">The text message to display.</param>
            <param name="position">The location (in screen coordinates) to draw the text.</param>
            <param name="color">
                The <see cref="T:Microsoft.Xna.Framework.Color" /> to tint a sprite. Use <see cref="P:Microsoft.Xna.Framework.Color.White" /> for full color with no
                tinting.
            </param>
            <param name="rotation">Specifies the angle (in radians) to rotate the text about its origin.</param>
            <param name="origin">The origin for each letter; the default is (0,0) which represents the upper-left corner.</param>
            <param name="scale">Scale factor.</param>
            <param name="effect">Effects to apply.</param>
            <param name="layerDepth">
                The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer.
                Use SpriteSortMode if you want sprites to be sorted during drawing.
            </param>
            <param name="clippingRectangle">Clips the boundaries of the text so that it's not drawn outside the clipping rectangle</param>
        </member>
        <member name="M:MonoGameEngine.Extended.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGameEngine.Extended.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
                Adds a string to a batch of sprites for rendering using the specified font, text, position, color, layer,
                and width (in pixels) where to wrap the text at.
            </summary>
            <remarks>
                <see cref="T:MonoGameEngine.Extended.BitmapFont" /> objects are loaded from the Content Manager. See the <see cref="T:MonoGameEngine.Extended.BitmapFont" /> class for
                more information.
                Before any calls to this method you must call <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect,System.Nullable{Microsoft.Xna.Framework.Matrix})" />. Once all calls 
                are complete, call <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End" />.
                Use a newline character (\n) to draw more than one line of text.
            </remarks>
            <param name="spriteBatch"></param>
            <param name="font">A font for displaying text.</param>
            <param name="text">The text message to display.</param>
            <param name="position">The location (in screen coordinates) to draw the text.</param>
            <param name="color">
                The <see cref="T:Microsoft.Xna.Framework.Color" /> to tint a sprite. Use <see cref="P:Microsoft.Xna.Framework.Color.White" /> for full color with no
                tinting.
            </param>
            <param name="layerDepth">
                The depth of a layer. By default, 0 represents the front layer and 1 represents a back layer.
                Use SpriteSortMode if you want sprites to be sorted during drawing.
            </param>
            <param name="clippingRectangle">Clips the boundaries of the text so that it's not drawn outside the clipping rectangle</param>
        </member>
        <member name="M:MonoGameEngine.Extended.BitmapFontExtensions.DrawString(Microsoft.Xna.Framework.Graphics.SpriteBatch,MonoGameEngine.Extended.BitmapFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
                Adds a string to a batch of sprites for rendering using the specified font, text, position, color,
                and width (in pixels) where to wrap the text at. The text is drawn on layer 0f.
            </summary>
            <param name="spriteBatch"></param>
            <param name="font">A font for displaying text.</param>
            <param name="text">The text message to display.</param>
            <param name="position">The location (in screen coordinates) to draw the text.</param>
            <param name="color">
                The <see cref="T:Microsoft.Xna.Framework.Color" /> to tint a sprite. Use <see cref="P:Microsoft.Xna.Framework.Color.White" /> for full color with no
                tinting.
            </param>
            <param name="clippingRectangle">Clips the boundaries of the text so that it's not drawn outside the clipping rectangle</param>
        </member>
        <member name="M:MonoGameEngine.Extended.ContentManagerExtensions.Load``1(Microsoft.Xna.Framework.Content.ContentManager,System.String,MonoGameEngine.Extended.IContentLoader)">
            <summary>
            Loads the content using a custom content loader.
            </summary>
        </member>
        <member name="M:MonoGameEngine.Extended.ContentManagerExtensions.Load``1(Microsoft.Xna.Framework.Content.ContentManager,System.String,MonoGameEngine.Extended.IContentLoader{``0})">
            <summary>
            Loads the content using a custom content loader.
            </summary>
        </member>
        <member name="T:MonoGameEngine.StandardCore.LoopType">
            <summary>Represents the style of loop that is desired for an animation.
            <br/>- <strong>Standard</strong> loops the animation from the start to the end, before starting from the beginning again.
            <br/>- <strong>Bounce</strong> bounces the animation loop forwards and backwards when it runs out of frames in its current direction.
            <br/>- <strong>None</strong> will only play the animation once before stopping on the final frame.
            </summary>
        </member>
        <member name="F:MonoGameEngine.StandardCore.LoopType.Standard">
            <summary>Loops the animation from the start to the end, before starting from the beginning again.</summary>
        </member>
        <member name="F:MonoGameEngine.StandardCore.LoopType.Bounce">
            <summary>Bounces the animation loop forwards and backwards when it runs out of frames in its current direction.</summary>
        </member>
        <member name="F:MonoGameEngine.StandardCore.LoopType.None">
            <summary>Will only play the animation once before stopping on the final frame.</summary>
        </member>
        <member name="T:MonoGameEngine.StandardCore.AnimatedSprite">
            <summary>A class that can handle sprite animation using a uniform spritesheet.</summary>
        </member>
        <member name="M:MonoGameEngine.StandardCore.AnimatedSprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Color},System.Int32)">
            <summary>
            The constructor for this class.
            </summary>
            <param name="texture">The spritesheet that this AnimatedSprite should use.</param>
            <param name="colour">[Optional] The colour that should be used when rendering the frames of this AnimatedSprite. White by default.</param>
            <param name="layerDepth">[Optional] The rendering depth of this AnimatedSprite. '5' by default.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.AnimatedSprite.Initialise(System.Int32,System.Int32,System.Single,System.Int32[],MonoGameEngine.StandardCore.LoopType)">
            <summary>
            Function that should be called when setting up this AnimatedSprite's attributes. Must be called before any animation can take place.
            </summary>
            <param name="frameWidth">The width of each frame of animation in the spritesheet (in pixels).</param>
            <param name="frameHeight">The height of each frame of animation in the spritesheet (in pixels).</param>
            <param name="animationSpeed">The speed at which the animation should cycle between its frames (in seconds).</param>
            <param name="framesPerAnimation">An array of integers, with each integer representing the frame count of the corresponding animation sequence.</param>
            <param name="loopType">[Optional] The type of animation looping that should be used. 'LoopType.Standard' by default.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.AnimatedSprite.StartAnimation(System.Int32,System.Nullable{System.Single},MonoGameEngine.StandardCore.LoopType)">
            <summary>
            Function used to begin a new animation. 
            </summary>
            <param name="animation">The number of the animation in the spritesheet. The first row is at index '0'.</param>
            <param name="animationSpeed">[Optional] The speed at which the animation should cycle between its frames (in seconds).</param>
            <param name="loopType">[Optional] The type of animation looping that should be used. 'LoopType.Standard' by default.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.AnimatedSprite.StartAnimation(System.Enum,System.Nullable{System.Single},MonoGameEngine.StandardCore.LoopType)">
            <summary>
            [Overload] Function used to begin a new animation. 
            </summary>
            <param name="animationEnum">The user-defined Enum which represents the desired animation row in the spritesheet. <br/>Enums should be written starting from '0', as per their default behaviour.</param>
            <param name="animationSpeed">[Optional] The speed at which the animation should cycle between its frames (in seconds).</param>
            <param name="loopType">[Optional] The type of animation looping that should be used. 'LoopType.Standard' by default.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.AnimatedSprite.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>
            The rendering function of this AnimatedSprite object.
            </summary>
            <param name="spriteBatch">The common SpriteBatch responsible for handling the sprites within the current game.</param>
            <param name="position">The position onscreen to draw this Sprite at.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.AnimatedSprite.Animate(System.Single)">
            <summary>
            The function responsible for updating the current frame of animation for this AnimatedSprite object. <b>Called automatically from the game's Screen</b>.
            </summary>
            <param name="deltaTime">The elapsed time since the last frame.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.AnimatedSprite.GetWidth">
            <summary>
            [Override] A getter function which returns the width of this AnimatedSprite's image.
            </summary>
            <returns>Returns an integer value representing the width of the current frame of animation.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.AnimatedSprite.GetHeight">
            <summary>
            [Override] A getter function which returns the height of this AnimatedSprite's image.
            </summary>
            <returns>Returns an integer value representing the height of the current frame of animation.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.AnimatedSprite.IsPaused">
            <summary>
            A getter function which returns the current 'paused' state of this AnimatedSprite's animation.
            </summary>
            <returns>Returns a boolean value representing whether or not this AnimatedSprite is currently animating or not.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.AnimatedSprite.SetPaused(System.Boolean)">
            <summary>
            A setter function which can either pause or resume this AnimatedSprite's animation updates.
            </summary>
            <param name="paused">A boolean value representing whether or not this AnimatedSprite should be paused.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.AnimatedSprite.SetFrameNumber(System.Int32)">
            <summary>
            A setter function which can manually assign the current frame of animation in the current sequence.
            </summary>
            <param name="newFrame">An integer value representing the frame of animation to switch to.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.AnimatedSprite.SetAnimationSpeed(System.Single)">
            <summary>
            A setter function which can assign a new animation speed multiplier to this AnimatedSprite's current animation.
            </summary>
            <param name="animationSpeed">A floating-point value representing the new animation speed multiplier to be used.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.AnimatedSprite.GetAnimationFrame">
            <summary>
            A getter function which returns the rectangle used to draw from the currently loaded spritesheet.
            </summary>
            <returns>A Rectangle object representing the spritesheet cell of the current frame of animation.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.AnimatedSprite.GetAnimationFrameByIndex(System.Int32,System.Int32)">
            <summary>
            A getter function which returns a new Rectangle representing a specific frame within the AnimatedSprite's spritesheet.
            </summary>
            <param name="frameIndex">An integer value representing the index within in the animation frames (the column of the spritesheet).</param>
            <param name="animationIndex">An integer value representing the index within in the available animations (the row of the spritesheet).</param>
            <returns>Returns a Rectangle object representing the requested spritesheet cell using the specified row and column.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.AnimatedSprite.GetFrameNumber">
            <summary>
            A getter function which returns the frame index of the current frame of animation within the sequence.
            </summary>
            <returns>An integer value representing the index of the animation frame within the current sequence.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.AnimatedSprite.GetAnimationIndex">
            <summary>
            A getter function which returns the index of the current animation within the established array of animations.
            </summary>
            <returns>An integer value representing the row of current animation frames in this AnimatedSprite's spritesheet.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.AnimatedSprite.IsFinished">
            <summary>
            A getter function which returns the state of this AnimatedSprite. Returns 'true' if the animation is not set to loop AND the last frame of animation is being displayed.
            </summary>
            <returns>A boolean value representing whether or not the current animation has finished.</returns>
        </member>
        <member name="T:MonoGameEngine.StandardCore.BackgroundType">
            <summary>Enum used to control Background rendering behaviour.
            <br/>- <strong>Stretch</strong> will fill the current window with the held image.
            <br/>- <strong>Wrap</strong> will tile the background image across the current window without stretching. Does not allow scrolling.
            <br/>- <strong>HorizontalScroll</strong> wraps the background image across the current window, but only allows scrolling horizontally.
            <br/>- <strong>VerticalScroll</strong> wraps the background image across the current window, but only allows scrolling vertically.
            <br/>- <strong>FullScroll</strong> wraps the background image across the current window, and allows scrolling in all directions.
            </summary>
        </member>
        <member name="T:MonoGameEngine.StandardCore.Background">
            <summary>A class which represents the background visual element of a given Screen.</summary>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Background.#ctor(MonoGameEngine.Core)">
            <summary>
            The constructor of this Background class.
            </summary>
            <param name="core">The Core instance at the center of this game project.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Background.Initialise(System.String,System.Single,MonoGameEngine.StandardCore.BackgroundType)">
            <summary>
            A method used for the initial setup of this Background object. 
            </summary>
            <param name="backgroundName"></param>
            <param name="type"></param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Background.Update(System.Single)">
            <summary>
            A method which allows this object to remain up-to-date.
            </summary>
            <param name="deltaTime">The time (in seconds) since the last frame of the game.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Background.Render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            A method which allows this Background object to be drawn to the game window.
            </summary>
            <param name="spriteBatch">The current batch of sprites to be rendered this frame of the game.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Background.SetRotation(System.Single)">
            <summary>
            A setter method for changing the rotation of the Background's viewport, in degrees. 
            </summary>
            <param name="degrees">A floating-point value representing the z-axis rotation of this Background object, in degrees.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Background.GetRotation">
            <summary>
            A getter method for accessing the rotation of this Background's viewport, in degrees.
            </summary>
            <returns>A floating-point value representing the current rotation of this Background, in degrees.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Background.GetPosition">
            <summary>
            A getter method for accessing the position of this Background's viewport.
            </summary>
            <returns>A Vector2 object representing the co-ordinates of this Background's on-screen position.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Background.SetPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            A setter method for changing the position of this Background's viewport. <br></br>Can only change the position of Backgrounds which have scrolling enabled.
            </summary>
            <param name="position">The on-screen position that this Background should move to.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Background.SetPosition(System.Single,System.Single)">
            <summary>
            [Overload] A setter method for changing the position of this Background's viewport. <br></br>Can only change the position of Backgrounds which have scrolling enabled.
            </summary>
            <param name="x">The on-screen horizontal co-ordinate that this Background should move to.</param>
            <param name="y">The on-screen vertical co-ordinate that this Background should move to.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Background.Move(Microsoft.Xna.Framework.Vector2)">
            <summary>
            A method which allows the user to move this Background object by a given amount. <br></br>Can only change the position of Backgrounds which have scrolling enabled.
            </summary>
            <param name="moveBy">A Vector2 object containing the number of pixels to move this Background object by, in the x and y axis respectively.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Background.Interpolate(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Poor man's tweening function.
            If the result is stored in the value, it will create a nice interpolation over multiple frames.
            </summary>
            <param name="start">The value to start from.</param>
            <param name="target">The value to reach.</param>
            <param name="speed">A value between 0f and 1f.</param>
            <param name="snapNear">
            When the difference between the target and the result is smaller than this value, the target will be returned.
            </param>
            <returns></returns>
        </member>
        <member name="T:MonoGameEngine.StandardCore.GameObject">
            <summary>A class which can be used as the base of any object needed within a game project.</summary>
        </member>
        <member name="F:MonoGameEngine.StandardCore.GameObject._currentScreen">
            <summary>A reference to the current Screen, allowing access to some higher-level functionality.</summary>
        </member>
        <member name="P:MonoGameEngine.StandardCore.GameObject.IsKinematic">
            <summary>A boolean property which allows velocity to automatically be added to the GameObject's position when set to 'true'.<br/> Value set to 'true' by default.</summary>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.#ctor">
            <summary>
            Default constructor for this class.
            </summary>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.OnceAdded">
            <summary>
            Method which is automatically called once, immediately after the GameObject has been first added to the Screen.
            </summary>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.Update(System.Single)">
            <summary>
            Must be overloaded by child classes. Allows code to be run every frame of the game. <b>Called automatically by the current Screen</b>.
            </summary>
            <param name="deltaTime">The elapsed time since the last frame.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.Render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Performs the drawing of this GameObject. Can be overloaded by child classes as needed. <b>Called automatically by the current Screen.</b>.
            </summary>
            <param name="spriteBatch">The common SpriteBatch responsible for handling the sprites within the current game.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.Raycast(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            This method sends out a RayCast in the given direction, and will check against all GameObjects in the current Screen.
            </summary>
            <param name="startPoint">The initial point of the raycast.</param>
            <param name="direction">The direction for the raycast to follow. Should be normalised (values between -1 and 1).</param>
            <param name="length">How far the ray should cast, in screen pixels.</param>
            <returns>Returns an array of objects hit by the projected raycast.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.ReceiveRaycast(MonoGameEngine.RayCast,MonoGameEngine.StandardCore.GameObject)">
            <summary>
            Virtual method that should be overloaded when looking for the GameObject to react to a received RayCast. <b>Called automatically by the game</b>.
            </summary>
            <param name="rayCast">The RayCast object that has been received.</param>
            <param name="sender">The GameObject which has sent out this RayCast.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.GetAllIntersectingObjects``1">
            <summary>
            Performs an immediate check for an intersection between this GameObject and other GameObjects of the requested TClass type.
            </summary>
            <typeparam name="TClass">The subclass of GameObject that should be checked against.</typeparam>
            <returns>Returns an array of other GameObjects if collisions are detected. Otherwise returns an empty array. <br/>Check the .Length property to see if any elements actually exist.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.GetOneIntersectingObject``1">
            <summary>
            Performs an immediate check for an intersection between the given GameObject and another GameObject of the requested TClass type.
            </summary>
            <typeparam name="TClass">The subclass of GameObject that should be checked against.</typeparam>
            <returns>Returns the other GameObject if a collision is found. Otherwise returns 'null'.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.GetAllObjectsAtOffset``1(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Performs an immediate check for other GameObjects of the requested TClass type at the given offset from this GameObject's current position.
            </summary>
            <typeparam name="TClass">The subclass of GameObject that should be checked against.</typeparam>
            <param name="offset">The offset coordinates.</param>
            <returns>Returns an array of the other GameObjects if a collision is found at the offset. Otherwise returns an empty array.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.GetAllObjectsAtOffset``1(System.Int32,System.Int32)">
            <summary>
            [Overload] Performs an immediate check for other GameObjects of the requested TClass type at the given offset from this GameObject's current position.
            </summary>
            <typeparam name="TClass">The subclass of GameObject that should be checked against.</typeparam>
            <param name="offsetX">The offset x-axis coordinate.</param>
            <param name="offsetY">The offset y-axis coordinate.</param>
            <returns>Returns an array of the other GameObjects if a collision is found at the offset. Otherwise returns an empty array.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.GetOneObjectAtOffset``1(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Performs an immediate check for a GameObject of the requested TClass type at the given offset from this GameObject's current position.
            </summary>
            <typeparam name="TClass">The subclass of GameObject that should be checked against.</typeparam>
            <param name="offset">The offset coordinates.</param>
            <returns>Returns the other GameObject if a collision is found. Otherwise returns 'null'.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.GetOneObjectAtOffset``1(System.Int32,System.Int32)">
            <summary>
            [Overload] Performs an immediate check for a GameObject of the requested TClass type at the given offset from this GameObject's current position.
            </summary>
            <typeparam name="TClass">The subclass of GameObject that should be checked against.</typeparam>
            <param name="offsetX">The offset x-axis coordinate.</param>
            <param name="offsetY">The offset y-axis coordinate.</param>
            <returns>Returns the other GameObject if a collision is found. Otherwise returns 'null'.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.GetOneObjectInRadius``1(System.Nullable{System.Single})">
            <summary>
            Performs an immediate check for a GameObject of the requested TClass type within a circle boundary represented by the center point of this GameObject and its largest axis.
            </summary>
            <typeparam name="TClass">The subclass of GameObject that should be checked against.</typeparam>
            <param name="radius">[Optional] The radius length of the circle that should be used. If left null, the larger of the width/height parameters will be used.</param>
            <returns>Returns the other GameObject if a collision is found. Otherwise returns 'null'.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.IsTouching``1">
            <summary>
            Performs an immediate check for an intersection between the given GameObject and any another GameObject of the requested TClass type.
            </summary>
            <typeparam name="TClass">The subclass of GameObject that should be checked against.</typeparam>
            <returns>Returns 'true' if a collision has taken place between this GameObject and another of the given subclass. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.IsAtScreenEdge">
            <summary>
            Performs a check on this GameObject's current position against the boundaries of the game window.
            </summary>
            <returns>Returns 'true' if an overlap with the screen boundaries is detected. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.IsOffscreen">
            <summary>
            Performs a check to see if this GameObject is actually visible on the current Screen.
            </summary>
            <returns>Returns 'true' if this GameObject is completely off-screen in any direction. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.MoveTowards(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Incrementally moves the GameObject towards a target position. Uses deltaTime to provide a smoother movement effect.
            <br/>Only works when IsKinematic property is set to 'false' for this GameObject.
            </summary>
            <param name="target">The on-screen position that the GameObject should move towards.</param>
            <param name="deltaTime">The time (in seconds) since the last frame of the game.</param>
            <param name="speed">[Optional] The speed at which the GameObject should move towards target. 1.0f by default. Clamped between 1.0f and 100.0f.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.LookAtPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Immediately rotates this GameObject to look towards the given target.
            </summary>
            <param name="targetPosition">The screen position that this GameObject should turn to face.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.OrbitAround(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Orbits around a given point in a circular motion.
            </summary>
            <param name="center">The on-screen position that the GameObject should orbit around.</param>
            <param name="loopsPerSecond">The number of times an orbit cycle will be completed per second. Automatically clamped between 0.05f and 5.0f.</param>
            <param name="radius">The distance at which the GameObject should orbit around the given center.</param>
            <param name="deltaTime">The time (in seconds) since the last frame of the game.</param>
            <param name="orbitClockwise">[Optional] Control to choose which direction the orbit should travel. 'true' by default.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.Pause(System.Single)">
            <summary>
            Pauses updates for this GameObject for the specified duration. Updates will resume automatically after the pause duration has elapsed.
            </summary>
            <param name="pauseDuration">The time, in seconds, that this GameObject should pause for.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.GetPosition">
            <summary>
            A getter function for this GameObject's screen position.
            </summary>
            <returns>A Vector2 object representing the on-screen position of this GameObject.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.GetX">
            <summary>
            A getter function which returns this GameObject's x-axis screen position.
            </summary>
            <returns>A floating-point value representing this GameObject's horizontal screen position, in pixels.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.GetY">
            <summary>
            A getter function which returns this GameObject's y-axis screen position.
            </summary>
            <returns>A floating-point value representing this GameObject's vertical screen position, in pixels.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.GetVelocity">
            <summary>
            A getter function for this GameObject's velocity.
            </summary>
            <returns>A Vector2 object representing the current velocity of this GameObject.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.GetSprite">
            <summary>
            A getter function for this GameObject's sprite or animated sprite.
            </summary>
            <returns>The Sprite currently representing this GameObject on-screen.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.GetBounds">
            <summary>
            A getter function for this GameObject's bounding box.
            </summary>
            <returns>The bounding box used by this GameObject.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.IsSolid">
            <summary>
            A getter function for this GameObject's 'solid' flag, for collision purposes.
            </summary>
            <returns>A boolean value representing whether or not this GameObject should be considered 'solid'.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.IsVisible">
            <summary>
            A getter function for this GameObject's 'visible' flag, for rendering purposes.
            </summary>
            <returns>A boolean value representing whether or not this GameObject should be considered 'visible'.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.IsActive">
            <summary>
            A getter function for this GameObject's 'active' flag, for updating purposes.
            </summary>
            <returns>A boolean value representing whether or not this GameObject is currently receiving updates.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.GetCenter">
            <summary>
            Calculates the center point of this GameObject, using its bounding box.
            </summary>
            <returns>A Vector2 containing the coordinates of the center point of this GameObject.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.GetAnimatedSprite">
            <summary>
            A getter function which will return the GameObject's sprite, if it currently uses an animated sprite.
            </summary>
            <returns>The sprite being used by the GameObject (cast as an AnimatedSprite) if appropriate. Otherwise returns 'null'.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.GetScreen">
            <summary>
            A getter function to access the current Screen.
            </summary>
            <returns>A reference to the current Screen object.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.SetPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            A setter function to reposition this GameObject onscreen.
            </summary>
            <param name="position">A Vector2 object containing the x and y co-ordinates for the new position.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.SetPosition(System.Int32,System.Int32)">
            <summary>
            [Overload] A setter function to reposition this GameObject onscreen.
            </summary>
            <param name="x">An integer value representing the new position for this GameObject in the x-axis.</param>
            <param name="y">An integer value representing the new position for this GameObject in the y-axis.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.SetPosition(System.Single,System.Single)">
            <summary>
            [Overload] A setter function to reposition this GameObject onscreen.
            </summary>
            <param name="x">A floating-point value representing the new position for this GameObject in the x-axis.</param>
            <param name="y">A floating-point value representing the new position for this GameObject in the y-axis.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.RevertPosition">
            <summary>
            A function which reverts this GameObject's position to the co-ordinates from before the most recent call to SetPosition().
            </summary>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.RevertPosition(System.Boolean,System.Boolean)">
            <summary>
            [Overload] A function which reverts this GameObject's position to the co-ordinates from before the most recent call to SetPosition().
            </summary>
            <param name="revertToX">A boolean value representing whether or not to revert the x co-ordinates.</param>
            <param name="revertToY">A boolean value representing whether or not to revert the y co-ordinates.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.AddVelocity(Microsoft.Xna.Framework.Vector2)">
            <summary>
            A function which adds the given deltaVelocity to the current velocity of this GameObject.
            </summary>
            <param name="deltaVelocity">A Vector2 object representing the amount of velocity to add to the existing velocity.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.AddVelocity(System.Single,System.Single)">
            <summary>
            [Overload] A function which adds the given deltaVelocity to the current velocity of this GameObject.
            </summary>
            <param name="xVelocity">A floating point value representing the change desired to this GameObject's horizontal velocity.</param>
            <param name="yVelocity">A floating point value representing the change desired to this GameObject's vertical velocity.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.SetVelocity(Microsoft.Xna.Framework.Vector2)">
            <summary>
            A setter function which allows the velocity of this GameObject to be directly changed.
            </summary>
            <param name="velocity">A Vector2 object representing the new horizontal and vertical velocities of this GameObject.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.SetVelocity(System.Single,System.Single)">
            <summary>
            [Overload] A setter function which allows the velocity of this GameObject to be directly changed.
            </summary>
            <param name="xVelocity">A floating point value representing the GameObject's horizontal velocity.</param>
            <param name="yVelocity">A floating point value representing the GameObject's vertical velocity.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.SetActive(System.Boolean)">
            <summary>
            A setter function which allows this GameObject to start or stop actively updating (i.e. automatic calls to the Update() method). Rendering will still take place regardless of whether or not this GameObject is currently updating.
            </summary>
            <param name="isActive">A boolean value representing whether or not this GameObject should be actively updated.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.SetVisible(System.Boolean)">
            <summary>
            A setter function which allows this GameObject to start or stop rendering to the screen. Collisions and other functional updates will still occur regardless of whether or not rendering takes place.
            </summary>
            <param name="isVisible">A boolean value representing whether or not this GameObject should be rendered to the screen.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.SetDrawDebug(System.Boolean,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            A setter function which enables or disables the drawing of a rectangle representing this GameObject's bounding box.
            </summary>
            <param name="drawDebug">A boolean value representing whether or not to render this GameObject's bounds.</param>
            <param name="drawColour">[Optional] A Color object representing the colour desired for rendering the debug bounds. Automatically sets Alpha value to 128.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.SetDebugColour(Microsoft.Xna.Framework.Color)">
            <summary>
            A setter function which can adjust the render colour of the debug bounds rendering for this GameObject.
            </summary>
            <param name="colour">A Color object representing the colour desired for rendering the debug bounds. Automatically sets Alpha value to 128.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.SetBounds(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            A setter function which can adjust the bounding box of this GameObject.
            </summary>
            <param name="bounds">A Rectangle object representing the desired bounding box dimensions.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.SetBounds(System.Int32,System.Int32)">
            <summary>
            [Overload] A setter function which can adjust the bounding box of this GameObject.
            </summary>
            <param name="width">The desired width of the bounding box.</param>
            <param name="height">The desired height of the bounding box.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.SetSprite(MonoGameEngine.StandardCore.Sprite,System.Boolean)">
            <summary>
            A setter function for assigning a new Sprite to visually represent this GameObject.
            </summary>
            <param name="sprite">The Sprite instance that should be used by this GameObject.</param>
            <param name="inWorldSpace">[Optional] A boolean representing whether to draw this Sprite in world space or screen space.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.SetSprite(Microsoft.Xna.Framework.Graphics.Texture2D,System.Boolean)">
            <summary>
            [Overload] A setter function for assigning a new Sprite to visually represent this GameObject.
            </summary>
            <param name="spriteImage">The image file that should be used by this GameObject's new Sprite.</param>
            <param name="inWorldSpace">[Optional] A boolean representing whether to draw this Sprite in world space or screen space.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.SetSprite(System.String,System.Boolean)">
            <summary>
            [Overload] A setter function for assigning a new Sprite to visually represent this GameObject.
            </summary>
            <param name="spriteName">The name of an image file that should be used by this GameObject's new Sprite.</param>
            <param name="inWorldSpace">[Optional] A boolean representing whether to draw this Sprite in world space or screen space.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.SetSprite(System.String,System.Int32,System.Int32,System.Single,System.Int32[],MonoGameEngine.StandardCore.LoopType,System.Boolean)">
            <summary>
            [Overload] A setter function for assigning a new AnimatedSprite to visually represent this GameObject.
            </summary>
            <param name="spritesheet">The name of the spritesheet that should be used for rendering.</param>
            <param name="frameWidth">The width of each frame of animation in the spritesheet (in pixels).</param>
            <param name="frameHeight">The height of each frame of animation in the spritesheet (in pixels).</param>
            <param name="animationSpeed">The speed at which the animation should cycle between its frames (in seconds).</param>
            <param name="framesPerAnimation">An array of integers, with each integer representing the frame count of the corresponding animation sequence.</param>
            <param name="loopType">[Optional] The type of animation looping that should be used. 'LoopType.Standard' by default.</param>
            <param name="inWorldSpace">[Optional] A boolean representing whether to draw this Sprite in world space or screen space.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.SetSprite(System.String,System.Int32,System.Single,System.Int32[],MonoGameEngine.StandardCore.LoopType,System.Boolean)">
            <summary>
            [Overload] A setter function for assigning a new AnimatedSprite to visually represent this GameObject.
            </summary>
            <param name="spritesheet">The name of the spritesheet that should be used for rendering.</param>
            <param name="frameSize">The width and height of each frame of animation in the spritesheet. This requires cells of matching widths and heights.</param>
            <param name="animationSpeed">The speed at which the animation should cycle between its frames (in seconds).</param>
            <param name="framesPerAnimation">An array of integers, with each integer representing the frame count of the corresponding animation sequence.</param>
            <param name="loopType">[Optional] The type of animation looping that should be used. 'LoopType.Standard' by default.</param>
            <param name="inWorldSpace">[Optional] A boolean representing whether to draw this Sprite in world space or screen space.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.GameObject.SetScreen(MonoGameEngine.StandardCore.Screen)">
            <summary>
            A setter function which can assign a new parent Screen to this GameObject. <b>Called automatically by the current Screen</b>.
            </summary>
            <param name="screen">A Screen object representing the new parent object of this GameObject.</param>
        </member>
        <member name="T:MonoGameEngine.StandardCore.Screen">
            <summary>The base Screen class, from which all of a game's screens should derive.</summary>
        </member>
        <member name="F:MonoGameEngine.StandardCore.Screen._core">
            <summary>A reference to the GameCore, allowing access to some high-level functionality.</summary>
        </member>
        <member name="F:MonoGameEngine.StandardCore.Screen._gameObjects">
            <summary>A collection of all the GameObjects existing in this Screen. All new GameObjects should be placed in this collection for automatic updating and rendering.</summary>
        </member>
        <member name="F:MonoGameEngine.StandardCore.Screen._text">
            <summary>A collection of all the Text objects existing in this Screen. All new Text objects should be placed in this collection for automatic rendering.</summary>
        </member>
        <member name="F:MonoGameEngine.StandardCore.Screen._removedObjects">
            <summary>A collection of all the GameObjects that have been flagged to be removed at the end of this frame. <em>CAUTION WHEN HANDLING</em>.</summary>
        </member>
        <member name="F:MonoGameEngine.StandardCore.Screen._removedText">
            <summary>A collection of all the Text that have been flagged to be removed at the end of this frame. <em>CAUTION WHEN HANDLING</em>.</summary>
        </member>
        <member name="F:MonoGameEngine.StandardCore.Screen._addedObjects">
            <summary>A collection of all the GameObjects that have been flagged to be added at the end of this frame. <em>CAUTION WHEN HANDLING</em>.</summary>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.Start(MonoGameEngine.Core)">
            <summary>
            Performs some basic setup required by every Screen. Can be overriden to perform more bespoke initialisation if needed.
            </summary>
            <param name="core">The game core of the current project.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.End">
            <summary>
            Performs general cleanup for this class. Can be overriden to provide more bespoke cleanup functionality as needed.
            </summary>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.Update(System.Single)">
            <summary>
            Performs the root updating functionality for the game. Can be overriden to provide more bespoke updating as needed.
            </summary>
            <param name="deltaTime">The time (in seconds) since the last frame of the game.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.Render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Performs the standard rendering of this screen. Can be overriden with more bespoke rendering functionality if needed.
            </summary>
            <param name="spriteBatch">The current batch of sprites to be rendered this frame of the game.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.Restart">
            <summary>
            Calls the Screen's Start method again, for the purposes of resetting the current Screen to its starting state.
            </summary>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.ParallaxBackgrounds(Microsoft.Xna.Framework.Vector2)">
            <summary>
            
            </summary>
            <param name="moveBy"></param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.SetParallaxStrength(System.Single)">
            <summary>
            A setter method for changing the amount of parallaxing applied to each Background layer of this Screen. '1.0f' is the default. Values are clamped between '0.1f' and '2.0f'.
            </summary>
            <param name="parallaxStrength">The parallax multiplier to be applied to each Background layer when moving. A higher number results in a higher speed, and a lower number results in a lower speed.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.AddObject(MonoGameEngine.StandardCore.GameObject,System.Int32,System.Int32)">
            <summary>
            Allows a GameObject to be added to the automatic update and render collection.
            </summary>
            <param name="obj">The new GameObject for the Screen to handle.</param>
            <param name="x">An integer value representing the horizontal position on the Screen to place the new GameObject.</param>
            <param name="y">An integer value representing the vertical position on the Screen to place the new GameObject.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.AddObject(MonoGameEngine.StandardCore.GameObject,System.Int32,System.Int32,System.String)">
            <summary>
            [Overload] Allows a GameObject to be added to the automatic update and render collection.
            </summary>
            <param name="obj">The new GameObject for the Screen to handle.</param>
            <param name="x">An integer value representing the horizontal position on the Screen to place the new GameObject.</param>
            <param name="y">An integer value representing the vertical position on the Screen to place the new GameObject.</param>
            <param name="spriteName">A string value representing the name of the sprite this new GameObject should use for rendering.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.RemoveObject(MonoGameEngine.StandardCore.GameObject)">
            <summary>
            Removes the given GameObject from the Screen at the end of the current frame of the game. 
            </summary>
            <param name="obj">The GameObject that should be removed from the Screen.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.ClearObjects">
            <summary>
            Clears all 'removed' GameObjects and Text from the Screen. This is used in conjunction with RemoveObject() and RemoveText().
            </summary>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.AppendObjects">
            <summary>
            Appends the GameObjects created this frame of the game. This is used in conjunction with AddObject().
            </summary>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.GetAllObjects">
            <summary>
            Allows access to the entire collection of GameObjects currently handled by the Screen.
            </summary>
            <returns>Returns a standard array of all GameObjects that this Screen currently handles.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.GetAllObjectsOfType``1">
            <summary>
            Provides an array of objects of a specified type that currently exist in this Screen.
            </summary>
            <typeparam name="TClass">The subclass type of GameObjects that should be found.</typeparam>
            <returns>Returns an array of GameObjects of a specified type that this Screen can find.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.GetOneObjectOfType``1">
            <summary>
            Provides the first object of the specified type that exists in this Screen.
            </summary>
            <typeparam name="TObject">The subclass type of GameObject that should be found.</typeparam>
            <returns>Returns the first instance of the specified type that this Screen can find as a GameObject.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.AddText(MonoGameEngine.StandardCore.Text,System.Int32,System.Int32)">
            <summary>
            Allows a Text object to be added to the automatic render collection.
            </summary>
            <param name="text">The new Text object for the Screen to handle.</param>
            <param name="x">An integer value representing the horizontal position on the Screen to place the new Text object.</param>
            <param name="y">An integer value representing the vertical position on the Screen to place the new Text object.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.RemoveText(MonoGameEngine.StandardCore.Text)">
            <summary>
            Removes the given Text from the Screen at the end of the current frame of the game. 
            </summary>
            <param name="text">The Text object that should be removed from the Screen.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.GetText">
            <summary>
            Allows access to the entire collection of Text objects currently handled by the Screen.
            </summary>
            <returns>A standard array of Text objects.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.SetColourSaturation(System.Single)">
            <summary>
            Provides access to changing the colour saturation of this Screen. Saturation is clamped between 0 and 1. Value set to 1.0f by default.
            </summary>
            <param name="saturation">The new saturation value (clamped between 0 and 1).</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.GetColourSaturation">
            <summary>
            Provides access to the colour saturation for this Screen.
            </summary>
            <returns>A floating point value from 0.0 - 1.0 representing the saturation of the colours in this Screen. </returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.SetBackground(System.String,MonoGameEngine.StandardCore.BackgroundType,System.Int32)">
            <summary>
            Allows a background image to be set for this Screen. The texture will be stretched to fit window, by default.
            </summary>
            <param name="name">A simple string for the name of the background. No filetype (.png, .jpg, etc.) required.</param>
            <param name="type">[Optional] An enumerated value representing how the Background should be rendered. Defaults to 'BackgroundType.Stretch'.</param>
            <param name="index">[Optional] The index of the Background (also used as the render layer). Defaults to '9', the furthest background from the camera..</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.GetBackground(System.Int32)">
            <summary>
            Getter method for accessing the Background instance belonging to this Screen.
            </summary>
            <param name="index">[Optional] The index of the Background in this Screen. Defaults to '9', the furthest background from the camera.</param>
            <returns>A Background object representing the background visual elements being rendered.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.GetFont">
            <summary>
            Getter method for accessing the primary font set for the game. This font can be adjusted in the Font.spritefont file in the Content folder of the project.
            </summary>
            <returns>A SpriteFont object for use when drawing text.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.GetWorldBounds">
            <summary>
            Getter method for accessing the rectangle representing this Screen's world boundaries.
            </summary>
            <returns>Returns a Rectangle object representing the world edges.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.SetWorldBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setter method for adjusting the world boundaries for this Screen. Used in conjunction with Camera2D scrolling.
            </summary>
            <param name="x">The on-screen horizontal position that the Rectangle should start from.</param>
            <param name="y">The on-screen vertical position that the Rectangle should start from.</param>
            <param name="width">The width of the world bounds from the x position.</param>
            <param name="height">The height of the world bounds from the y position.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.SetWorldBounds(System.Int32,System.Int32)">
            <summary>
            [Overload] Setter method for adjusting the world boundaries for this Screen. Used in conjunction with Camera2D scrolling.
            </summary>
            <param name="width">The width of the world bounds from x co-ordinate '0'.</param>
            <param name="height">The height of the world bounds from y co-ordinate '0'.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.SetWorldBounds(Microsoft.Xna.Framework.Vector2)">
            <summary>
            [Overload] Setter method for adjusting the world boundaries for this Screen. Used in conjunction with Camera2D scrolling.
            </summary>
            <param name="dimensions">A vector representing the width and height of this Screen's world, starting at origin (0,0).</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.SetWorldBounds(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            [Overload] Setter method for adjusting the world boundaries for this Screen. Used in conjunction with Camera2D scrolling.
            </summary>
            <param name="rect">A rectangle representing the desired bounds of this Screen's world.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Screen.Pause(System.Single)">
            <summary>
            Pauses updates to the entire Screen for the specified duration, in seconds. AudioManager, Transition and Camera2D remain unaffected. <br/>
            <strong>NOTE:</strong> This will also pause the adding and removing of GameObjects within the Screen.
            </summary>
            <param name="pauseDuration">The amount of time, in seconds, that the Screen should remain paused.</param>
        </member>
        <member name="T:MonoGameEngine.StandardCore.Sprite">
            <summary>A class which can handle a static sprite image.</summary>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Color},System.Int32)">
            <summary>
            The constructor for this class.
            </summary>
            <param name="texture">The image that should be used by this Sprite object.</param>
            <param name="tint">[Optional] The tint with which this Sprite's image should be rendered. White by default.</param>
            <param name="layerDepth">[Optional] The depth at which this Sprite should be rendered. '5' by default.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.GetBounds">
            <summary>
            A getter method which returns the Rectangle representing the bounding box of this Sprite.
            </summary>
            <returns>Returns a Rectangle object which represents the edges of this Sprite's image.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.GetWidth">
            <summary>
            A getter method which returns the width (in pixels) of this Sprite's image.
            </summary>
            <returns>Returns an integer value representing this Sprite's width.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.GetHeight">
            <summary>
            A getter method which returns the height (in pixels) of this Sprite's image.
            </summary>
            <returns>Returns an integer value representing this Sprite's height.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.GetOrigin">
            <summary>
            A getter method which returns the position of this Sprite's origin.
            </summary>
            <returns>A Vector2 object containing the coordinates of this Sprite's center point.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.GetTint">
            <summary>
            A getter method which returns the current rendering tint used by this Sprite.
            </summary>
            <returns>A Color object containing the RGBA values used when tinting this Sprite's image.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.GetLayerDepth">
            <summary>
            A getter method which returns the current rendering depth of this Sprite. The lower the number, the earlier this Sprite's image will be drawn in the render order.
            </summary>
            <returns>An integer value representing the layer depth of this Sprite.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.GetRotation">
            <summary>
            A getter method which returns the current rotation (in degrees) that this Sprite's image will be drawn at.
            </summary>
            <returns>A floating-point value representing the rotation of this Sprite's image.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.GetFillColour">
            <summary>
            A getter method which returns the colour used to fill all the pixels of this Sprite, ignoring alpha (transparency).
            </summary>
            <returns>A Color object containing the RGBA values used when filling this Sprite's image.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.GetFillEffectStrength">
            <summary>
            A getter method which returns the strength of the 'fill' pixel effect's blending. 
            <br/>1.0f will completely fill the Sprite with the fill colour, and 0.0f will ignore the fill colour.
            </summary>
            <returns>A floating point number which represents the amount of blending the fill colour has with the Sprite's original colours.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.SetRotation(System.Single)">
            <summary>
            A setter method for setting the rotation (in degrees) of this Sprite.
            </summary>
            <param name="rotation">The rotation (in degrees) to render this Sprite at.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.SetLayerDepth(System.Int32)">
            <summary>
            A setter method for changing the render layer depth of this Sprite. '5' by default.
            </summary>
            <param name="layerDepth">The layer depth to render this sprite at. The higher the number, the closer to the background the sprite will be rendered.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.SetScale(System.Single,System.Single)">
            <summary>
            A setter method which sets the fractional scale for this Sprite, per axis. Scale values are (1,1) by default.
            </summary>
            <param name="scaleX">Decimal value to scale the x-axis by.</param>
            <param name="scaleY">Decimal value to scale the y-axis by.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.GetScale">
            <summary>
            A getter method which gets the current fractional scale for this Sprite.
            </summary>
            <returns>A Vector2 object containing the floating point fractional value used for scaling this Sprite.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.SetOrigin(System.Single,System.Single)">
            <summary>
            A setter method which sets the origin point for this Sprite. Values should be between 0.0f and 1.0f. Origin point is (0.0f, 0.0f) by default.
            </summary>
            <param name="originX">Fraction of the width of the sprite. Value should be between 0.0f and 1.0f.</param>
            <param name="originY">Fraction of the height of the sprite. Value should be between 0.0f and 1.0f.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.SetTint(Microsoft.Xna.Framework.Color)">
            <summary>
            A setter method which sets the render tint for this Sprite. Tint is White by default.
            </summary>
            <param name="tint">The Colour with which to tint the rendered Sprite image.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.SetTint(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            [Override] A setter method which sets the render tint for this Sprite using separate colour values. Tint is 255, 255, 255 by default.
            </summary>
            <param name="r">An integer value representing the red colour channel for the new Color. Value is clamped between 0 and 255.</param>
            <param name="b">An integer value representing the blue colour channel for the new Color. Value is clamped between 0 and 255.</param>
            <param name="g">An integer value representing the green colour channel for the new Color. Value is clamped between 0 and 255.</param>
            <param name="a">[Optional] An integer value representing the alpha (transparency) channel for the new Color. Value is clamped between 0 and 255. Set to 255 (fully opaque) by default.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.FillWithColour(Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            A method which sets the fill colour for this Sprite, ignoring base transparency. Fill is 0, 0, 0, 0 by default.
            </summary>
            <param name="fillColour">The Colour with which to fill the rendered Sprite image.</param>
            <param name="effectStrength">[Optional] The amount (0.0f - 1.0f) that the fill colour should blend with the original Sprite's colours. Values are clamped automatically.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.FillWithColour(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            [Override] A method which sets the fill colour for this Sprite, ignoring base transparency. Fill is 0, 0, 0, 0 by default.
            </summary>
            <param name="r">An integer value representing the red colour channel for the new Color. Value is clamped between 0 and 255.</param>
            <param name="b">An integer value representing the blue colour channel for the new Color. Value is clamped between 0 and 255.</param>
            <param name="g">An integer value representing the green colour channel for the new Color. Value is clamped between 0 and 255.</param>
            <param name="a">[Optional] An integer value representing the alpha (transparency) channel for the new Color. Value is clamped between 0 and 255. Set to 255 (fully opaque) by default.</param>
            <param name="effectStrength">[Optional] The amount (0.0f - 1.0f) that the fill colour should blend with the original Sprite's colours. Values are clamped automatically.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.SetInWorldSpace(System.Boolean)">
            <summary>
            A setter method which sets whether or not this Sprite should be drawn in world space or screen space.
            </summary>
            <param name="inWorldSpace">A boolean which represents if this Sprite is in world space or not.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.SetTexture(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            A setter method which sets the image texture for this Sprite to use.
            </summary>
            <param name="texture">The texture which should be used as an image for this Sprite.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.GetTexture">
            <summary>
            A getter method that returns the image texture being used by this Sprite.
            </summary>
            <returns>The Texture2D which represents the image used by this Sprite.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.GetPosition">
            <summary>
            A getter method which returns the position on-screen where this Sprite will be rendered. 
            </summary>
            <returns>A Vector2 object representing the on-screen pixel location of this Sprite's origin.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.SetPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            A setter method which allocates a new on-screen position for this Sprite to render at.
            </summary>
            <param name="position">The new on-screen position for this Sprite, in pixel co-ordinates.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>
            The rendering function of this Sprite object. 
            </summary>
            <param name="spriteBatch">The current batch of sprites to be rendered this frame of the game.</param>
            <param name="position">The position onscreen to draw this Sprite at.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.IsHorizontallyFlipped">
            <summary>
            A method which checks if this Sprite has been set to be rendered with a flipped horizontal axis.
            </summary>
            <returns>Returns 'true' if this Sprite is being drawn with a flipped horizontal axis. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.IsVerticallyFlipped">
            <summary>
            A method which checks if this Sprite has been set to be rendered with a flipped vertical axis.
            </summary>
            <returns>Returns 'true' if this Sprite is being drawn with a flipped vertical axis. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.FlipHorizontally(System.Boolean)">
            <summary>
            A method which will allow the Sprite to be rendered with a flipped horizontal axis. Useful for rendering sprites facing left or right.
            </summary>
            <param name="flip">Represents whether or not the Sprite should be flipped horizontally or not.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.FlipVertically(System.Boolean)">
            <summary>
            A method which will allow the Sprite to be rendered with a flipped vertical axis. Useful for rendering sprites facing up or down.
            </summary>
            <param name="flip">Represents whether or not the Sprite should be flipped vertically or not.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Sprite.Rotate(System.Single)">
            <summary>
            Rotates the Sprite around its origin by a given amount, in degrees.
            </summary>
            <param name="rotateAmount">The amount, in degrees, to rotate the sprite by.</param>
        </member>
        <member name="T:MonoGameEngine.StandardCore.Text">
            <summary>A class which can represent some text for displaying onscreen.</summary>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Text.#ctor(System.String,System.Nullable{Microsoft.Xna.Framework.Color},System.String,System.Boolean)">
            <summary>
            The constructor for this class.
            </summary>
            <param name="message">The text which will be printed to the screen.</param>
            /// <param name="colour">[Optional] The colour applied to the text. Black by default.</param>
            /// <param name="fontName">[Optional] The font used for the text rendering. Arial by default.</param>
            <param name="inScreenSpace">[Optional] Should the Text be drawn in world space or screen space?</param>W
        </member>
        <member name="M:MonoGameEngine.StandardCore.Text.SetScale(System.Single)">
            <summary>
            A setter method for changing the scale factor of this rendered text.
            </summary>
            <param name="scale">The amount of scaling that should be applied to this Text.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Text.GetScale">
            <summary>
            A getter method for returning the current scale factor for this Text object.
            </summary>
            <returns>Returns the current scale factor.</returns>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Text.SetOrigin(System.Single,System.Single)">
            <summary>
            A setter method which sets the origin point for this Text. Values should be between 0.0f and 1.0f. Origin point is (0.0f, 0.0f) by default.
            </summary>
            <param name="originX">Fraction of the width of the sprite. Value should be between 0.0f and 1.0f.</param>
            <param name="originY">Fraction of the height of the sprite. Value should be between 0.0f and 1.0f.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Text.SetMessage(System.String)">
            <summary>
            A setter method for changing the string being displayed.
            </summary>
            <param name="newMessage">The string that should be displayed onscreen.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Text.SetColour(Microsoft.Xna.Framework.Color)">
            <summary>
            A setter method for changing the rendering colour of this Text. Colour is White by default.
            </summary>
            <param name="newColour">The colour that should be used for rendering.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Text.SetColour(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            [Override] A setter method for changing the rendering colour of this Text using separate colour values. Colour is 255, 255, 255 by default.
            </summary>
            <param name="r">An integer value representing the red colour channel for the new Color. Value is clamped between 0 and 255.</param>
            <param name="b">An integer value representing the blue colour channel for the new Color. Value is clamped between 0 and 255.</param>
            <param name="g">An integer value representing the green colour channel for the new Color. Value is clamped between 0 and 255.</param>
            <param name="a">[Optional] An integer value representing the alpha (transparency) channel for the new Color. Value is clamped between 0 and 255. Set to 255 (fully opaque) by default.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Text.SetPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            A setter method for changing the drawing location of this Text object.
            </summary>
            <param name="newPosition">The position that this Text object should be drawn at.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Text.SetFont(System.String)">
            <summary>
            A setter method for applying a new font to this Text object's string.
            </summary>
            <param name="fontName">The new font that should be applied.</param>
        </member>
        <member name="M:MonoGameEngine.StandardCore.Text.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            The rendering function for this Text object. <b>Called automatically by the game's Screen</b>.
            </summary>
            <param name="spriteBatch">The current batch of sprites for rendering in the Monogame pipeline.</param>
        </member>
        <member name="T:MonoGameEngine.RayCast">
            <summary>A class which represents a raycast from one point (in screen space) to another.</summary>
        </member>
        <member name="M:MonoGameEngine.RayCast.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            A constructor which will generate the vector direction based on the given coordinates.
            </summary>
            <param name="startPos">A Vector2 object representing the starting point of this RayCast.</param>
            <param name="endPos">A Vector2 object representing the end point of this RayCast.</param>
        </member>
        <member name="M:MonoGameEngine.RayCast.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            A constructor which will generate the end point of this RayCast using the direction and length provided.
            </summary>
            <param name="startPos">A Vector2 object representing the starting point of this RayCast.</param>
            <param name="direction">A Vector2 object representing the direction this RayCast should travel.</param>
            <param name="length">A floating-point value representing the length of the desired RayCast (in pixels).</param>
        </member>
        <member name="M:MonoGameEngine.RayCast.IsPointOnVector(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks to see if a single, given point can be found on this Raycast's line.
            </summary>
            <param name="point">The point that should be checked against this Raycast's line.</param>
            <returns>Returns 'true' if the point exists along this Raycast's line. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.RayCast.CheckBoundHit(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Method used to check whether or not this RayCast will intersect a given Rectangle.
            </summary>
            <param name="bounds">The Rectangle we want to check against.</param>
            <returns>Returns true if the Rectangle is intersected by this RayCast. Otherwise, returns false.</returns>
        </member>
        <member name="M:MonoGameEngine.RayCast.LineIntersection(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Method that can check if another Vector (from the start and end points provided) intersects this Raycast.
            </summary>
            <param name="lineStart">The start point of the vector to check.</param>
            <param name="lineEnd">The end point of the vector to check.</param>
            <returns>Returns 'true' if an intersection is detected. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.RayCast.GetDirection">
            <summary>
            A simple getter method to calculate the direction of this Raycast.
            </summary>
            <returns>A Vector2 containing the direction values of this Raycast.</returns>
        </member>
        <member name="M:MonoGameEngine.RayCast.GetLength">
            <summary>
            A getter method which calculates the length (magnitude) of this Raycast.
            </summary>
            <returns>Returns a float value of the calculated length of this line.</returns>
        </member>
        <member name="T:MonoGameEngine.TransitionType">
            <summary>Enum used to represent the animation style desired for a transition.
            <br/>- <strong>Fade</strong> will perform a fullscreen fade in to/out from a solid colour by adjusting the transparency level.
            <br/>- <strong>Fill</strong> will perform a scaling box fill in/out using a solid colour.
            <br/>- <strong>SwipeLeft</strong> will perform a swipe transition in a leftward motion, using a single colour panel.
            <br/>- <strong>SwipeRight</strong> will perform a swipe transition in a rightward motion, using a single colour panel.
            <br/>- <strong>SwipeUp</strong> will perform a swipe transition in a upward motion, using a single colour panel.
            <br/>- <strong>SwipeDown</strong> will perform a swipe transition in a downward motion, using a single colour panel.
            </summary>
        </member>
        <member name="T:MonoGameEngine.Transition">
            <summary>A class which represents a transition special effect.</summary>
        </member>
        <member name="M:MonoGameEngine.Transition.#cctor">
            <summary>
            Private constructor necessary to instantiate the Transition singleton.
            </summary>
        </member>
        <member name="P:MonoGameEngine.Transition.Instance">
            <summary>
            Provides access to this Transition object. The main way to use the built-in screen transition functionality.
            </summary>
        </member>
        <member name="M:MonoGameEngine.Transition.Setup(MonoGameEngine.Core)">
            <summary>
            Provides essential setup for the Transition object. <b>Automatically called by the game's Core</b>.
            </summary>
            <param name="core">The Core of the game.</param>
        </member>
        <member name="M:MonoGameEngine.Transition.Update(System.Single)">
            <summary>
            Ensures the Transition object is kept up-to-date. <b>Automatically called by the game's Core</b>.
            </summary>
            <param name="deltaTime">Time since the last frame.</param>
        </member>
        <member name="M:MonoGameEngine.Transition.Render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draws the Transition panel texture above the rest of the game. <b>Automatically called by the game's Core</b>.
            </summary>
            <param name="spriteBatch">The common SpriteBatch used by the game.</param>
        </member>
        <member name="M:MonoGameEngine.Transition.ToScreen``1(MonoGameEngine.TransitionType,System.Nullable{Microsoft.Xna.Framework.Color},System.Single)">
            <summary>
            Start a transition, then swap to the desired Screen once complete.
            </summary>
            <typeparam name="TScreen">The Screen that should start next.</typeparam>
            <param name="type">[Optional] The type of transition that is desired. 'Fade' by default.</param>
            <param name="fadeColour">[Optional] The colour that the transition should use.</param>
            <param name="transitionDuration">[Optional] The time, in seconds, that the transition fadeout should take. 0.25 seconds by default.</param>
        </member>
        <member name="M:MonoGameEngine.Transition.StartTransition(MonoGameEngine.TransitionType,System.Nullable{Microsoft.Xna.Framework.Color},System.Single)">
            <summary>
            Start a transition, without swapping to another Screen.
            </summary>
            <param name="type">[Optional] The type of transition that is desired. 'Fade' by default.</param>
            <param name="fadeColour">[Optional] The colour that the transition should use.</param>
            <param name="transitionDuration">[Optional] The time, in seconds, that the transition fadeout should take. 0.25 seconds by default.</param>
        </member>
        <member name="M:MonoGameEngine.Transition.EndTransition(System.Nullable{MonoGameEngine.TransitionType},System.Single)">
            <summary>
            Begins the 'end' animation of the chosen Transition. Should be called in the Start() method of any Screen that you have transitioned to.
            </summary>
            <param name="type">[Optional] The type of transition that is desired. 'Fade' by default.</param>
            <param name="transitionDuration">[Optional] The time, in seconds, that the transition fadein should take. 0.25 seconds by default.</param>
        </member>
        <member name="M:MonoGameEngine.Transition.IsActive">
            <summary>
            A getter method to check if a Transition effect is currently running.
            </summary>
            <returns>Returns 'true' if an effect is running. Otherwise, returns 'false'.</returns>
        </member>
    </members>
</doc>
